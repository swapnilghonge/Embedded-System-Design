                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _del_num
                                     13 	.globl _getinput_30_300
                                     14 	.globl _getinput
                                     15 	.globl __sdcc_external_startup
                                     16 	.globl _free
                                     17 	.globl _malloc
                                     18 	.globl _printf_tiny
                                     19 	.globl _TF1
                                     20 	.globl _TR1
                                     21 	.globl _TF0
                                     22 	.globl _TR0
                                     23 	.globl _IE1
                                     24 	.globl _IT1
                                     25 	.globl _IE0
                                     26 	.globl _IT0
                                     27 	.globl _SM0
                                     28 	.globl _SM1
                                     29 	.globl _SM2
                                     30 	.globl _REN
                                     31 	.globl _TB8
                                     32 	.globl _RB8
                                     33 	.globl _TI
                                     34 	.globl _RI
                                     35 	.globl _CY
                                     36 	.globl _AC
                                     37 	.globl _F0
                                     38 	.globl _RS1
                                     39 	.globl _RS0
                                     40 	.globl _OV
                                     41 	.globl _F1
                                     42 	.globl _P
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD0
                                     50 	.globl _TXD
                                     51 	.globl _RXD0
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _P0_7
                                     78 	.globl _P0_6
                                     79 	.globl _P0_5
                                     80 	.globl _P0_4
                                     81 	.globl _P0_3
                                     82 	.globl _P0_2
                                     83 	.globl _P0_1
                                     84 	.globl _P0_0
                                     85 	.globl _PS
                                     86 	.globl _PT1
                                     87 	.globl _PX1
                                     88 	.globl _PT0
                                     89 	.globl _PX0
                                     90 	.globl _EA
                                     91 	.globl _ES
                                     92 	.globl _ET1
                                     93 	.globl _EX1
                                     94 	.globl _ET0
                                     95 	.globl _EX0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl _TMOD
                                    154 	.globl _TL1
                                    155 	.globl _TL0
                                    156 	.globl _TH1
                                    157 	.globl _TH0
                                    158 	.globl _TCON
                                    159 	.globl _SP
                                    160 	.globl _SCON
                                    161 	.globl _SBUF0
                                    162 	.globl _SBUF
                                    163 	.globl _PSW
                                    164 	.globl _PCON
                                    165 	.globl _P3
                                    166 	.globl _P2
                                    167 	.globl _P1
                                    168 	.globl _P0
                                    169 	.globl _IP
                                    170 	.globl _IE
                                    171 	.globl _DP0L
                                    172 	.globl _DPL
                                    173 	.globl _DP0H
                                    174 	.globl _DPH
                                    175 	.globl _B
                                    176 	.globl _ACC
                                    177 	.globl _EECON
                                    178 	.globl _KBF
                                    179 	.globl _KBE
                                    180 	.globl _KBLS
                                    181 	.globl _BRL
                                    182 	.globl _BDRCON
                                    183 	.globl _T2MOD
                                    184 	.globl _SPDAT
                                    185 	.globl _SPSTA
                                    186 	.globl _SPCON
                                    187 	.globl _SADEN
                                    188 	.globl _SADDR
                                    189 	.globl _WDTPRG
                                    190 	.globl _WDTRST
                                    191 	.globl _P5
                                    192 	.globl _P4
                                    193 	.globl _IPH1
                                    194 	.globl _IPL1
                                    195 	.globl _IPH0
                                    196 	.globl _IPL0
                                    197 	.globl _IEN1
                                    198 	.globl _IEN0
                                    199 	.globl _CMOD
                                    200 	.globl _CL
                                    201 	.globl _CH
                                    202 	.globl _CCON
                                    203 	.globl _CCAPM4
                                    204 	.globl _CCAPM3
                                    205 	.globl _CCAPM2
                                    206 	.globl _CCAPM1
                                    207 	.globl _CCAPM0
                                    208 	.globl _CCAP4L
                                    209 	.globl _CCAP3L
                                    210 	.globl _CCAP2L
                                    211 	.globl _CCAP1L
                                    212 	.globl _CCAP0L
                                    213 	.globl _CCAP4H
                                    214 	.globl _CCAP3H
                                    215 	.globl _CCAP2H
                                    216 	.globl _CCAP1H
                                    217 	.globl _CCAP0H
                                    218 	.globl _CKCON1
                                    219 	.globl _CKCON0
                                    220 	.globl _CKRL
                                    221 	.globl _AUXR1
                                    222 	.globl _AUXR
                                    223 	.globl _TH2
                                    224 	.globl _TL2
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _T2CON
                                    228 	.globl _i
                                    229 	.globl _total_char
                                    230 	.globl _storage
                                    231 	.globl _num
                                    232 	.globl _input_char
                                    233 	.globl _buffer_1_add
                                    234 	.globl _buffer_0_add
                                    235 	.globl _buffer_n
                                    236 	.globl _buffer_1
                                    237 	.globl _buffer_0
                                    238 	.globl _heap
                                    239 	.globl _putchar
                                    240 	.globl _getchar
                                    241 ;--------------------------------------------------------
                                    242 ; special function registers
                                    243 ;--------------------------------------------------------
                                    244 	.area RSEG    (ABS,DATA)
      000000                        245 	.org 0x0000
                           0000C8   246 _T2CON	=	0x00c8
                           0000CA   247 _RCAP2L	=	0x00ca
                           0000CB   248 _RCAP2H	=	0x00cb
                           0000CC   249 _TL2	=	0x00cc
                           0000CD   250 _TH2	=	0x00cd
                           00008E   251 _AUXR	=	0x008e
                           0000A2   252 _AUXR1	=	0x00a2
                           000097   253 _CKRL	=	0x0097
                           00008F   254 _CKCON0	=	0x008f
                           0000AF   255 _CKCON1	=	0x00af
                           0000FA   256 _CCAP0H	=	0x00fa
                           0000FB   257 _CCAP1H	=	0x00fb
                           0000FC   258 _CCAP2H	=	0x00fc
                           0000FD   259 _CCAP3H	=	0x00fd
                           0000FE   260 _CCAP4H	=	0x00fe
                           0000EA   261 _CCAP0L	=	0x00ea
                           0000EB   262 _CCAP1L	=	0x00eb
                           0000EC   263 _CCAP2L	=	0x00ec
                           0000ED   264 _CCAP3L	=	0x00ed
                           0000EE   265 _CCAP4L	=	0x00ee
                           0000DA   266 _CCAPM0	=	0x00da
                           0000DB   267 _CCAPM1	=	0x00db
                           0000DC   268 _CCAPM2	=	0x00dc
                           0000DD   269 _CCAPM3	=	0x00dd
                           0000DE   270 _CCAPM4	=	0x00de
                           0000D8   271 _CCON	=	0x00d8
                           0000F9   272 _CH	=	0x00f9
                           0000E9   273 _CL	=	0x00e9
                           0000D9   274 _CMOD	=	0x00d9
                           0000A8   275 _IEN0	=	0x00a8
                           0000B1   276 _IEN1	=	0x00b1
                           0000B8   277 _IPL0	=	0x00b8
                           0000B7   278 _IPH0	=	0x00b7
                           0000B2   279 _IPL1	=	0x00b2
                           0000B3   280 _IPH1	=	0x00b3
                           0000C0   281 _P4	=	0x00c0
                           0000E8   282 _P5	=	0x00e8
                           0000A6   283 _WDTRST	=	0x00a6
                           0000A7   284 _WDTPRG	=	0x00a7
                           0000A9   285 _SADDR	=	0x00a9
                           0000B9   286 _SADEN	=	0x00b9
                           0000C3   287 _SPCON	=	0x00c3
                           0000C4   288 _SPSTA	=	0x00c4
                           0000C5   289 _SPDAT	=	0x00c5
                           0000C9   290 _T2MOD	=	0x00c9
                           00009B   291 _BDRCON	=	0x009b
                           00009A   292 _BRL	=	0x009a
                           00009C   293 _KBLS	=	0x009c
                           00009D   294 _KBE	=	0x009d
                           00009E   295 _KBF	=	0x009e
                           0000D2   296 _EECON	=	0x00d2
                           0000E0   297 _ACC	=	0x00e0
                           0000F0   298 _B	=	0x00f0
                           000083   299 _DPH	=	0x0083
                           000083   300 _DP0H	=	0x0083
                           000082   301 _DPL	=	0x0082
                           000082   302 _DP0L	=	0x0082
                           0000A8   303 _IE	=	0x00a8
                           0000B8   304 _IP	=	0x00b8
                           000080   305 _P0	=	0x0080
                           000090   306 _P1	=	0x0090
                           0000A0   307 _P2	=	0x00a0
                           0000B0   308 _P3	=	0x00b0
                           000087   309 _PCON	=	0x0087
                           0000D0   310 _PSW	=	0x00d0
                           000099   311 _SBUF	=	0x0099
                           000099   312 _SBUF0	=	0x0099
                           000098   313 _SCON	=	0x0098
                           000081   314 _SP	=	0x0081
                           000088   315 _TCON	=	0x0088
                           00008C   316 _TH0	=	0x008c
                           00008D   317 _TH1	=	0x008d
                           00008A   318 _TL0	=	0x008a
                           00008B   319 _TL1	=	0x008b
                           000089   320 _TMOD	=	0x0089
                                    321 ;--------------------------------------------------------
                                    322 ; special function bits
                                    323 ;--------------------------------------------------------
                                    324 	.area RSEG    (ABS,DATA)
      000000                        325 	.org 0x0000
                           0000AD   326 _ET2	=	0x00ad
                           0000BD   327 _PT2	=	0x00bd
                           0000C8   328 _T2CON_0	=	0x00c8
                           0000C9   329 _T2CON_1	=	0x00c9
                           0000CA   330 _T2CON_2	=	0x00ca
                           0000CB   331 _T2CON_3	=	0x00cb
                           0000CC   332 _T2CON_4	=	0x00cc
                           0000CD   333 _T2CON_5	=	0x00cd
                           0000CE   334 _T2CON_6	=	0x00ce
                           0000CF   335 _T2CON_7	=	0x00cf
                           0000C8   336 _CP_RL2	=	0x00c8
                           0000C9   337 _C_T2	=	0x00c9
                           0000CA   338 _TR2	=	0x00ca
                           0000CB   339 _EXEN2	=	0x00cb
                           0000CC   340 _TCLK	=	0x00cc
                           0000CD   341 _RCLK	=	0x00cd
                           0000CE   342 _EXF2	=	0x00ce
                           0000CF   343 _TF2	=	0x00cf
                           0000DF   344 _CF	=	0x00df
                           0000DE   345 _CR	=	0x00de
                           0000DC   346 _CCF4	=	0x00dc
                           0000DB   347 _CCF3	=	0x00db
                           0000DA   348 _CCF2	=	0x00da
                           0000D9   349 _CCF1	=	0x00d9
                           0000D8   350 _CCF0	=	0x00d8
                           0000AE   351 _EC	=	0x00ae
                           0000BE   352 _PPCL	=	0x00be
                           0000BD   353 _PT2L	=	0x00bd
                           0000BC   354 _PSL	=	0x00bc
                           0000BB   355 _PT1L	=	0x00bb
                           0000BA   356 _PX1L	=	0x00ba
                           0000B9   357 _PT0L	=	0x00b9
                           0000B8   358 _PX0L	=	0x00b8
                           0000C0   359 _P4_0	=	0x00c0
                           0000C1   360 _P4_1	=	0x00c1
                           0000C2   361 _P4_2	=	0x00c2
                           0000C3   362 _P4_3	=	0x00c3
                           0000C4   363 _P4_4	=	0x00c4
                           0000C5   364 _P4_5	=	0x00c5
                           0000C6   365 _P4_6	=	0x00c6
                           0000C7   366 _P4_7	=	0x00c7
                           0000E8   367 _P5_0	=	0x00e8
                           0000E9   368 _P5_1	=	0x00e9
                           0000EA   369 _P5_2	=	0x00ea
                           0000EB   370 _P5_3	=	0x00eb
                           0000EC   371 _P5_4	=	0x00ec
                           0000ED   372 _P5_5	=	0x00ed
                           0000EE   373 _P5_6	=	0x00ee
                           0000EF   374 _P5_7	=	0x00ef
                           0000F0   375 _BREG_F0	=	0x00f0
                           0000F1   376 _BREG_F1	=	0x00f1
                           0000F2   377 _BREG_F2	=	0x00f2
                           0000F3   378 _BREG_F3	=	0x00f3
                           0000F4   379 _BREG_F4	=	0x00f4
                           0000F5   380 _BREG_F5	=	0x00f5
                           0000F6   381 _BREG_F6	=	0x00f6
                           0000F7   382 _BREG_F7	=	0x00f7
                           0000A8   383 _EX0	=	0x00a8
                           0000A9   384 _ET0	=	0x00a9
                           0000AA   385 _EX1	=	0x00aa
                           0000AB   386 _ET1	=	0x00ab
                           0000AC   387 _ES	=	0x00ac
                           0000AF   388 _EA	=	0x00af
                           0000B8   389 _PX0	=	0x00b8
                           0000B9   390 _PT0	=	0x00b9
                           0000BA   391 _PX1	=	0x00ba
                           0000BB   392 _PT1	=	0x00bb
                           0000BC   393 _PS	=	0x00bc
                           000080   394 _P0_0	=	0x0080
                           000081   395 _P0_1	=	0x0081
                           000082   396 _P0_2	=	0x0082
                           000083   397 _P0_3	=	0x0083
                           000084   398 _P0_4	=	0x0084
                           000085   399 _P0_5	=	0x0085
                           000086   400 _P0_6	=	0x0086
                           000087   401 _P0_7	=	0x0087
                           000090   402 _P1_0	=	0x0090
                           000091   403 _P1_1	=	0x0091
                           000092   404 _P1_2	=	0x0092
                           000093   405 _P1_3	=	0x0093
                           000094   406 _P1_4	=	0x0094
                           000095   407 _P1_5	=	0x0095
                           000096   408 _P1_6	=	0x0096
                           000097   409 _P1_7	=	0x0097
                           0000A0   410 _P2_0	=	0x00a0
                           0000A1   411 _P2_1	=	0x00a1
                           0000A2   412 _P2_2	=	0x00a2
                           0000A3   413 _P2_3	=	0x00a3
                           0000A4   414 _P2_4	=	0x00a4
                           0000A5   415 _P2_5	=	0x00a5
                           0000A6   416 _P2_6	=	0x00a6
                           0000A7   417 _P2_7	=	0x00a7
                           0000B0   418 _P3_0	=	0x00b0
                           0000B1   419 _P3_1	=	0x00b1
                           0000B2   420 _P3_2	=	0x00b2
                           0000B3   421 _P3_3	=	0x00b3
                           0000B4   422 _P3_4	=	0x00b4
                           0000B5   423 _P3_5	=	0x00b5
                           0000B6   424 _P3_6	=	0x00b6
                           0000B7   425 _P3_7	=	0x00b7
                           0000B0   426 _RXD	=	0x00b0
                           0000B0   427 _RXD0	=	0x00b0
                           0000B1   428 _TXD	=	0x00b1
                           0000B1   429 _TXD0	=	0x00b1
                           0000B2   430 _INT0	=	0x00b2
                           0000B3   431 _INT1	=	0x00b3
                           0000B4   432 _T0	=	0x00b4
                           0000B5   433 _T1	=	0x00b5
                           0000B6   434 _WR	=	0x00b6
                           0000B7   435 _RD	=	0x00b7
                           0000D0   436 _P	=	0x00d0
                           0000D1   437 _F1	=	0x00d1
                           0000D2   438 _OV	=	0x00d2
                           0000D3   439 _RS0	=	0x00d3
                           0000D4   440 _RS1	=	0x00d4
                           0000D5   441 _F0	=	0x00d5
                           0000D6   442 _AC	=	0x00d6
                           0000D7   443 _CY	=	0x00d7
                           000098   444 _RI	=	0x0098
                           000099   445 _TI	=	0x0099
                           00009A   446 _RB8	=	0x009a
                           00009B   447 _TB8	=	0x009b
                           00009C   448 _REN	=	0x009c
                           00009D   449 _SM2	=	0x009d
                           00009E   450 _SM1	=	0x009e
                           00009F   451 _SM0	=	0x009f
                           000088   452 _IT0	=	0x0088
                           000089   453 _IE0	=	0x0089
                           00008A   454 _IT1	=	0x008a
                           00008B   455 _IE1	=	0x008b
                           00008C   456 _TR0	=	0x008c
                           00008D   457 _TF0	=	0x008d
                           00008E   458 _TR1	=	0x008e
                           00008F   459 _TF1	=	0x008f
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable register banks
                                    462 ;--------------------------------------------------------
                                    463 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        464 	.ds 8
                                    465 ;--------------------------------------------------------
                                    466 ; internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area DSEG    (DATA)
      000000                        469 _main_sloc0_1_0:
      000000                        470 	.ds 2
      000002                        471 _main_sloc1_1_0:
      000002                        472 	.ds 2
      000004                        473 _main_sloc2_1_0:
      000004                        474 	.ds 2
      000006                        475 _main_sloc3_1_0:
      000006                        476 	.ds 2
      000008                        477 _main_sloc4_1_0:
      000008                        478 	.ds 2
      00000A                        479 _main_sloc5_1_0:
      00000A                        480 	.ds 2
                                    481 ;--------------------------------------------------------
                                    482 ; overlayable items in internal ram 
                                    483 ;--------------------------------------------------------
                                    484 ;--------------------------------------------------------
                                    485 ; Stack segment in internal ram 
                                    486 ;--------------------------------------------------------
                                    487 	.area	SSEG
      000000                        488 __start__stack:
      000000                        489 	.ds	1
                                    490 
                                    491 ;--------------------------------------------------------
                                    492 ; indirectly addressable internal ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area ISEG    (DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; absolute internal ram data
                                    497 ;--------------------------------------------------------
                                    498 	.area IABS    (ABS,DATA)
                                    499 	.area IABS    (ABS,DATA)
                                    500 ;--------------------------------------------------------
                                    501 ; bit data
                                    502 ;--------------------------------------------------------
                                    503 	.area BSEG    (BIT)
                                    504 ;--------------------------------------------------------
                                    505 ; paged external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area PSEG    (PAG,XDATA)
                                    508 ;--------------------------------------------------------
                                    509 ; external ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area XSEG    (XDATA)
      000000                        512 _heap::
      000000                        513 	.ds 4800
      0012C0                        514 _buffer_0::
      0012C0                        515 	.ds 2
      0012C2                        516 _buffer_1::
      0012C2                        517 	.ds 2
      0012C4                        518 _buffer_n::
      0012C4                        519 	.ds 100
      001328                        520 _buffer_0_add::
      001328                        521 	.ds 2
      00132A                        522 _buffer_1_add::
      00132A                        523 	.ds 2
      00132C                        524 _input_char::
      00132C                        525 	.ds 2
      00132E                        526 _num::
      00132E                        527 	.ds 2
      001330                        528 _putchar_c_65536_43:
      001330                        529 	.ds 2
      001332                        530 _main_buff_size_65536_61:
      001332                        531 	.ds 100
      001396                        532 _main_p_196609_66:
      001396                        533 	.ds 3
                                    534 ;--------------------------------------------------------
                                    535 ; absolute external ram data
                                    536 ;--------------------------------------------------------
                                    537 	.area XABS    (ABS,XDATA)
                                    538 ;--------------------------------------------------------
                                    539 ; external initialized ram data
                                    540 ;--------------------------------------------------------
                                    541 	.area XISEG   (XDATA)
      000000                        542 _storage::
      000000                        543 	.ds 2
      000002                        544 _total_char::
      000002                        545 	.ds 2
      000004                        546 _i::
      000004                        547 	.ds 2
                                    548 	.area HOME    (CODE)
                                    549 	.area GSINIT0 (CODE)
                                    550 	.area GSINIT1 (CODE)
                                    551 	.area GSINIT2 (CODE)
                                    552 	.area GSINIT3 (CODE)
                                    553 	.area GSINIT4 (CODE)
                                    554 	.area GSINIT5 (CODE)
                                    555 	.area GSINIT  (CODE)
                                    556 	.area GSFINAL (CODE)
                                    557 	.area CSEG    (CODE)
                                    558 ;--------------------------------------------------------
                                    559 ; interrupt vector 
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
      000000                        562 __interrupt_vect:
      000000 02r00r00         [24]  563 	ljmp	__sdcc_gsinit_startup
                                    564 ;--------------------------------------------------------
                                    565 ; global & static initialisations
                                    566 ;--------------------------------------------------------
                                    567 	.area HOME    (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 	.area GSFINAL (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 	.globl __sdcc_gsinit_startup
                                    572 	.globl __sdcc_program_startup
                                    573 	.globl __start__stack
                                    574 	.globl __mcs51_genXINIT
                                    575 	.globl __mcs51_genXRAMCLEAR
                                    576 	.globl __mcs51_genRAMCLEAR
                                    577 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  578 	ljmp	__sdcc_program_startup
                                    579 ;--------------------------------------------------------
                                    580 ; Home
                                    581 ;--------------------------------------------------------
                                    582 	.area HOME    (CODE)
                                    583 	.area HOME    (CODE)
      000003                        584 __sdcc_program_startup:
      000003 02r03r8E         [24]  585 	ljmp	_main
                                    586 ;	return from main will return to caller
                                    587 ;--------------------------------------------------------
                                    588 ; code
                                    589 ;--------------------------------------------------------
                                    590 	.area CSEG    (CODE)
                                    591 ;------------------------------------------------------------
                                    592 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    593 ;------------------------------------------------------------
                                    594 ;	main.c:39: _sdcc_external_startup()
                                    595 ;	-----------------------------------------
                                    596 ;	 function _sdcc_external_startup
                                    597 ;	-----------------------------------------
      000000                        598 __sdcc_external_startup:
                           000007   599 	ar7 = 0x07
                           000006   600 	ar6 = 0x06
                           000005   601 	ar5 = 0x05
                           000004   602 	ar4 = 0x04
                           000003   603 	ar3 = 0x03
                           000002   604 	ar2 = 0x02
                           000001   605 	ar1 = 0x01
                           000000   606 	ar0 = 0x00
                                    607 ;	main.c:41: AUXR |= 0x0C;
      000000 43 8E 0C         [24]  608 	orl	_AUXR,#0x0c
                                    609 ;	main.c:42: return 0;
      000003 90 00 00         [24]  610 	mov	dptr,#0x0000
                                    611 ;	main.c:43: }
      000006 22               [24]  612 	ret
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function 'putchar'
                                    615 ;------------------------------------------------------------
                                    616 ;c                         Allocated with name '_putchar_c_65536_43'
                                    617 ;------------------------------------------------------------
                                    618 ;	main.c:47: int putchar (int c)
                                    619 ;	-----------------------------------------
                                    620 ;	 function putchar
                                    621 ;	-----------------------------------------
      000007                        622 _putchar:
      000007 AF 83            [24]  623 	mov	r7,dph
      000009 E5 82            [12]  624 	mov	a,dpl
      00000B 90r13r30         [24]  625 	mov	dptr,#_putchar_c_65536_43
      00000E F0               [24]  626 	movx	@dptr,a
      00000F EF               [12]  627 	mov	a,r7
      000010 A3               [24]  628 	inc	dptr
      000011 F0               [24]  629 	movx	@dptr,a
                                    630 ;	main.c:51: while (!TI);
      000012                        631 00101$:
      000012 30 99 FD         [24]  632 	jnb	_TI,00101$
                                    633 ;	main.c:52: SBUF = c;           // load serial port with transmit value
      000015 90r13r30         [24]  634 	mov	dptr,#_putchar_c_65536_43
      000018 E0               [24]  635 	movx	a,@dptr
      000019 FE               [12]  636 	mov	r6,a
      00001A A3               [24]  637 	inc	dptr
      00001B E0               [24]  638 	movx	a,@dptr
      00001C FF               [12]  639 	mov	r7,a
      00001D 8E 99            [24]  640 	mov	_SBUF,r6
                                    641 ;	main.c:53: TI = 0;             // clear TI flag
                                    642 ;	assignBit
      00001F C2 99            [12]  643 	clr	_TI
                                    644 ;	main.c:55: return c;
      000021 8E 82            [24]  645 	mov	dpl,r6
      000023 8F 83            [24]  646 	mov	dph,r7
                                    647 ;	main.c:56: }
      000025 22               [24]  648 	ret
                                    649 ;------------------------------------------------------------
                                    650 ;Allocation info for local variables in function 'getchar'
                                    651 ;------------------------------------------------------------
                                    652 ;	main.c:61: int getchar (void)
                                    653 ;	-----------------------------------------
                                    654 ;	 function getchar
                                    655 ;	-----------------------------------------
      000026                        656 _getchar:
                                    657 ;	main.c:65: while (!RI);
      000026                        658 00101$:
                                    659 ;	main.c:66: RI = 0;                         // clear RI flag
                                    660 ;	assignBit
      000026 10 98 02         [24]  661 	jbc	_RI,00114$
      000029 80 FB            [24]  662 	sjmp	00101$
      00002B                        663 00114$:
                                    664 ;	main.c:67: return SBUF;                    // return character from SBUF
      00002B AE 99            [24]  665 	mov	r6,_SBUF
      00002D 7F 00            [12]  666 	mov	r7,#0x00
      00002F 8E 82            [24]  667 	mov	dpl,r6
      000031 8F 83            [24]  668 	mov	dph,r7
                                    669 ;	main.c:68: }
      000033 22               [24]  670 	ret
                                    671 ;------------------------------------------------------------
                                    672 ;Allocation info for local variables in function 'getinput'
                                    673 ;------------------------------------------------------------
                                    674 ;a                         Allocated with name '_getinput_a_65536_47'
                                    675 ;b                         Allocated with name '_getinput_b_65536_47'
                                    676 ;c                         Allocated with name '_getinput_c_65536_47'
                                    677 ;d                         Allocated with name '_getinput_d_65536_47'
                                    678 ;number                    Allocated with name '_getinput_number_65536_47'
                                    679 ;e                         Allocated with name '_getinput_e_65537_48'
                                    680 ;f                         Allocated with name '_getinput_f_65538_49'
                                    681 ;g                         Allocated with name '_getinput_g_65539_50'
                                    682 ;h                         Allocated with name '_getinput_h_65540_51'
                                    683 ;------------------------------------------------------------
                                    684 ;	main.c:72: unsigned int getinput()
                                    685 ;	-----------------------------------------
                                    686 ;	 function getinput
                                    687 ;	-----------------------------------------
      000034                        688 _getinput:
                                    689 ;	main.c:80: again:  printf_tiny("Enter a value divisible btw 48 and 4800 and divisible by 16\r\n");
      000034                        690 00101$:
      000034 74r00            [12]  691 	mov	a,#___str_0
      000036 C0 E0            [24]  692 	push	acc
      000038 74s00            [12]  693 	mov	a,#(___str_0 >> 8)
      00003A C0 E0            [24]  694 	push	acc
      00003C 12r00r00         [24]  695 	lcall	_printf_tiny
      00003F 15 81            [12]  696 	dec	sp
      000041 15 81            [12]  697 	dec	sp
                                    698 ;	main.c:82: a = getchar(); // get first digit
      000043 12r00r26         [24]  699 	lcall	_getchar
      000046 E5 82            [12]  700 	mov	a,dpl
      000048 85 83 F0         [24]  701 	mov	b,dph
                                    702 ;	main.c:83: int e=a-'0';
      00004B 24 D0            [12]  703 	add	a,#0xd0
      00004D FE               [12]  704 	mov	r6,a
      00004E E5 F0            [12]  705 	mov	a,b
      000050 34 FF            [12]  706 	addc	a,#0xff
      000052 FF               [12]  707 	mov	r7,a
                                    708 ;	main.c:84: printf_tiny("a= %d\r\n", e);
      000053 C0 07            [24]  709 	push	ar7
      000055 C0 06            [24]  710 	push	ar6
      000057 C0 06            [24]  711 	push	ar6
      000059 C0 07            [24]  712 	push	ar7
      00005B 74r3E            [12]  713 	mov	a,#___str_1
      00005D C0 E0            [24]  714 	push	acc
      00005F 74s00            [12]  715 	mov	a,#(___str_1 >> 8)
      000061 C0 E0            [24]  716 	push	acc
      000063 12r00r00         [24]  717 	lcall	_printf_tiny
      000066 E5 81            [12]  718 	mov	a,sp
      000068 24 FC            [12]  719 	add	a,#0xfc
      00006A F5 81            [12]  720 	mov	sp,a
                                    721 ;	main.c:88: b = getchar(); // get 2nd digit
      00006C 12r00r26         [24]  722 	lcall	_getchar
      00006F E5 82            [12]  723 	mov	a,dpl
      000071 85 83 F0         [24]  724 	mov	b,dph
                                    725 ;	main.c:89: int f=b-'0';
      000074 24 D0            [12]  726 	add	a,#0xd0
      000076 FC               [12]  727 	mov	r4,a
      000077 E5 F0            [12]  728 	mov	a,b
      000079 34 FF            [12]  729 	addc	a,#0xff
      00007B FD               [12]  730 	mov	r5,a
                                    731 ;	main.c:90: printf_tiny("b= %d\r\n", f);
      00007C C0 05            [24]  732 	push	ar5
      00007E C0 04            [24]  733 	push	ar4
      000080 C0 04            [24]  734 	push	ar4
      000082 C0 05            [24]  735 	push	ar5
      000084 74r46            [12]  736 	mov	a,#___str_2
      000086 C0 E0            [24]  737 	push	acc
      000088 74s00            [12]  738 	mov	a,#(___str_2 >> 8)
      00008A C0 E0            [24]  739 	push	acc
      00008C 12r00r00         [24]  740 	lcall	_printf_tiny
      00008F E5 81            [12]  741 	mov	a,sp
      000091 24 FC            [12]  742 	add	a,#0xfc
      000093 F5 81            [12]  743 	mov	sp,a
                                    744 ;	main.c:94: c = getchar(); // get 3rd digit
      000095 12r00r26         [24]  745 	lcall	_getchar
      000098 E5 82            [12]  746 	mov	a,dpl
      00009A 85 83 F0         [24]  747 	mov	b,dph
                                    748 ;	main.c:95: int g=c-'0';
      00009D 24 D0            [12]  749 	add	a,#0xd0
      00009F FA               [12]  750 	mov	r2,a
      0000A0 E5 F0            [12]  751 	mov	a,b
      0000A2 34 FF            [12]  752 	addc	a,#0xff
      0000A4 FB               [12]  753 	mov	r3,a
                                    754 ;	main.c:96: printf_tiny(" c = %d\r\n", g);
      0000A5 C0 03            [24]  755 	push	ar3
      0000A7 C0 02            [24]  756 	push	ar2
      0000A9 C0 02            [24]  757 	push	ar2
      0000AB C0 03            [24]  758 	push	ar3
      0000AD 74r4E            [12]  759 	mov	a,#___str_3
      0000AF C0 E0            [24]  760 	push	acc
      0000B1 74s00            [12]  761 	mov	a,#(___str_3 >> 8)
      0000B3 C0 E0            [24]  762 	push	acc
      0000B5 12r00r00         [24]  763 	lcall	_printf_tiny
      0000B8 E5 81            [12]  764 	mov	a,sp
      0000BA 24 FC            [12]  765 	add	a,#0xfc
      0000BC F5 81            [12]  766 	mov	sp,a
                                    767 ;	main.c:100: d= getchar(); // get 4th digit
      0000BE 12r00r26         [24]  768 	lcall	_getchar
      0000C1 E5 82            [12]  769 	mov	a,dpl
      0000C3 85 83 F0         [24]  770 	mov	b,dph
                                    771 ;	main.c:101: int h=d-'0';
      0000C6 24 D0            [12]  772 	add	a,#0xd0
      0000C8 F8               [12]  773 	mov	r0,a
      0000C9 E5 F0            [12]  774 	mov	a,b
      0000CB 34 FF            [12]  775 	addc	a,#0xff
      0000CD F9               [12]  776 	mov	r1,a
                                    777 ;	main.c:102: printf_tiny(" d = %d \r\n", h);
      0000CE C0 01            [24]  778 	push	ar1
      0000D0 C0 00            [24]  779 	push	ar0
      0000D2 C0 00            [24]  780 	push	ar0
      0000D4 C0 01            [24]  781 	push	ar1
      0000D6 74r58            [12]  782 	mov	a,#___str_4
      0000D8 C0 E0            [24]  783 	push	acc
      0000DA 74s00            [12]  784 	mov	a,#(___str_4 >> 8)
      0000DC C0 E0            [24]  785 	push	acc
      0000DE 12r00r00         [24]  786 	lcall	_printf_tiny
      0000E1 E5 81            [12]  787 	mov	a,sp
      0000E3 24 FC            [12]  788 	add	a,#0xfc
      0000E5 F5 81            [12]  789 	mov	sp,a
      0000E7 D0 00            [24]  790 	pop	ar0
      0000E9 D0 01            [24]  791 	pop	ar1
      0000EB D0 02            [24]  792 	pop	ar2
      0000ED D0 03            [24]  793 	pop	ar3
      0000EF D0 04            [24]  794 	pop	ar4
      0000F1 D0 05            [24]  795 	pop	ar5
      0000F3 D0 06            [24]  796 	pop	ar6
      0000F5 D0 07            [24]  797 	pop	ar7
                                    798 ;	main.c:106: number= (e*1000 + f*100 + g*10 + h);
      0000F7 90r00r00         [24]  799 	mov	dptr,#__mulint_PARM_2
      0000FA EE               [12]  800 	mov	a,r6
      0000FB F0               [24]  801 	movx	@dptr,a
      0000FC EF               [12]  802 	mov	a,r7
      0000FD A3               [24]  803 	inc	dptr
      0000FE F0               [24]  804 	movx	@dptr,a
      0000FF 90 03 E8         [24]  805 	mov	dptr,#0x03e8
      000102 C0 05            [24]  806 	push	ar5
      000104 C0 04            [24]  807 	push	ar4
      000106 C0 03            [24]  808 	push	ar3
      000108 C0 02            [24]  809 	push	ar2
      00010A C0 01            [24]  810 	push	ar1
      00010C C0 00            [24]  811 	push	ar0
      00010E 12r00r00         [24]  812 	lcall	__mulint
      000111 AE 82            [24]  813 	mov	r6,dpl
      000113 AF 83            [24]  814 	mov	r7,dph
      000115 D0 00            [24]  815 	pop	ar0
      000117 D0 01            [24]  816 	pop	ar1
      000119 D0 02            [24]  817 	pop	ar2
      00011B D0 03            [24]  818 	pop	ar3
      00011D D0 04            [24]  819 	pop	ar4
      00011F D0 05            [24]  820 	pop	ar5
      000121 90r00r00         [24]  821 	mov	dptr,#__mulint_PARM_2
      000124 EC               [12]  822 	mov	a,r4
      000125 F0               [24]  823 	movx	@dptr,a
      000126 ED               [12]  824 	mov	a,r5
      000127 A3               [24]  825 	inc	dptr
      000128 F0               [24]  826 	movx	@dptr,a
      000129 90 00 64         [24]  827 	mov	dptr,#0x0064
      00012C C0 07            [24]  828 	push	ar7
      00012E C0 06            [24]  829 	push	ar6
      000130 C0 03            [24]  830 	push	ar3
      000132 C0 02            [24]  831 	push	ar2
      000134 C0 01            [24]  832 	push	ar1
      000136 C0 00            [24]  833 	push	ar0
      000138 12r00r00         [24]  834 	lcall	__mulint
      00013B AC 82            [24]  835 	mov	r4,dpl
      00013D AD 83            [24]  836 	mov	r5,dph
      00013F D0 00            [24]  837 	pop	ar0
      000141 D0 01            [24]  838 	pop	ar1
      000143 D0 02            [24]  839 	pop	ar2
      000145 D0 03            [24]  840 	pop	ar3
      000147 D0 06            [24]  841 	pop	ar6
      000149 D0 07            [24]  842 	pop	ar7
      00014B EC               [12]  843 	mov	a,r4
      00014C 2E               [12]  844 	add	a,r6
      00014D FE               [12]  845 	mov	r6,a
      00014E ED               [12]  846 	mov	a,r5
      00014F 3F               [12]  847 	addc	a,r7
      000150 FF               [12]  848 	mov	r7,a
      000151 90r00r00         [24]  849 	mov	dptr,#__mulint_PARM_2
      000154 EA               [12]  850 	mov	a,r2
      000155 F0               [24]  851 	movx	@dptr,a
      000156 EB               [12]  852 	mov	a,r3
      000157 A3               [24]  853 	inc	dptr
      000158 F0               [24]  854 	movx	@dptr,a
      000159 90 00 0A         [24]  855 	mov	dptr,#0x000a
      00015C C0 07            [24]  856 	push	ar7
      00015E C0 06            [24]  857 	push	ar6
      000160 C0 01            [24]  858 	push	ar1
      000162 C0 00            [24]  859 	push	ar0
      000164 12r00r00         [24]  860 	lcall	__mulint
      000167 AC 82            [24]  861 	mov	r4,dpl
      000169 AD 83            [24]  862 	mov	r5,dph
      00016B D0 00            [24]  863 	pop	ar0
      00016D D0 01            [24]  864 	pop	ar1
      00016F D0 06            [24]  865 	pop	ar6
      000171 D0 07            [24]  866 	pop	ar7
      000173 EC               [12]  867 	mov	a,r4
      000174 2E               [12]  868 	add	a,r6
      000175 FE               [12]  869 	mov	r6,a
      000176 ED               [12]  870 	mov	a,r5
      000177 3F               [12]  871 	addc	a,r7
      000178 FF               [12]  872 	mov	r7,a
      000179 E8               [12]  873 	mov	a,r0
      00017A 2E               [12]  874 	add	a,r6
      00017B FE               [12]  875 	mov	r6,a
      00017C E9               [12]  876 	mov	a,r1
      00017D 3F               [12]  877 	addc	a,r7
      00017E FF               [12]  878 	mov	r7,a
                                    879 ;	main.c:107: printf_tiny("number = %d\n\r", number);
      00017F C0 07            [24]  880 	push	ar7
      000181 C0 06            [24]  881 	push	ar6
      000183 C0 06            [24]  882 	push	ar6
      000185 C0 07            [24]  883 	push	ar7
      000187 74r63            [12]  884 	mov	a,#___str_5
      000189 C0 E0            [24]  885 	push	acc
      00018B 74s00            [12]  886 	mov	a,#(___str_5 >> 8)
      00018D C0 E0            [24]  887 	push	acc
      00018F 12r00r00         [24]  888 	lcall	_printf_tiny
      000192 E5 81            [12]  889 	mov	a,sp
      000194 24 FC            [12]  890 	add	a,#0xfc
      000196 F5 81            [12]  891 	mov	sp,a
      000198 D0 06            [24]  892 	pop	ar6
      00019A D0 07            [24]  893 	pop	ar7
                                    894 ;	main.c:108: if((number>=48) &&(number<=4800)&&(number%16==0)) // value of digit >48 and less then 4800
      00019C 8E 04            [24]  895 	mov	ar4,r6
      00019E 8F 05            [24]  896 	mov	ar5,r7
      0001A0 C3               [12]  897 	clr	c
      0001A1 EC               [12]  898 	mov	a,r4
      0001A2 94 30            [12]  899 	subb	a,#0x30
      0001A4 ED               [12]  900 	mov	a,r5
      0001A5 94 00            [12]  901 	subb	a,#0x00
      0001A7 40 4F            [24]  902 	jc	00103$
      0001A9 8E 04            [24]  903 	mov	ar4,r6
      0001AB 8F 05            [24]  904 	mov	ar5,r7
      0001AD C3               [12]  905 	clr	c
      0001AE 74 C0            [12]  906 	mov	a,#0xc0
      0001B0 9C               [12]  907 	subb	a,r4
      0001B1 74 12            [12]  908 	mov	a,#0x12
      0001B3 9D               [12]  909 	subb	a,r5
      0001B4 40 42            [24]  910 	jc	00103$
      0001B6 8E 04            [24]  911 	mov	ar4,r6
      0001B8 8F 05            [24]  912 	mov	ar5,r7
      0001BA EC               [12]  913 	mov	a,r4
      0001BB 54 0F            [12]  914 	anl	a,#0x0f
      0001BD 70 39            [24]  915 	jnz	00103$
                                    916 ;	main.c:110: printf_tiny("valid input\r\n");
      0001BF C0 07            [24]  917 	push	ar7
      0001C1 C0 06            [24]  918 	push	ar6
      0001C3 74r71            [12]  919 	mov	a,#___str_6
      0001C5 C0 E0            [24]  920 	push	acc
      0001C7 74s00            [12]  921 	mov	a,#(___str_6 >> 8)
      0001C9 C0 E0            [24]  922 	push	acc
      0001CB 12r00r00         [24]  923 	lcall	_printf_tiny
      0001CE 15 81            [12]  924 	dec	sp
      0001D0 15 81            [12]  925 	dec	sp
      0001D2 D0 06            [24]  926 	pop	ar6
      0001D4 D0 07            [24]  927 	pop	ar7
                                    928 ;	main.c:111: printf_tiny("num= %d", number);
      0001D6 C0 07            [24]  929 	push	ar7
      0001D8 C0 06            [24]  930 	push	ar6
      0001DA C0 06            [24]  931 	push	ar6
      0001DC C0 07            [24]  932 	push	ar7
      0001DE 74r7F            [12]  933 	mov	a,#___str_7
      0001E0 C0 E0            [24]  934 	push	acc
      0001E2 74s00            [12]  935 	mov	a,#(___str_7 >> 8)
      0001E4 C0 E0            [24]  936 	push	acc
      0001E6 12r00r00         [24]  937 	lcall	_printf_tiny
      0001E9 E5 81            [12]  938 	mov	a,sp
      0001EB 24 FC            [12]  939 	add	a,#0xfc
      0001ED F5 81            [12]  940 	mov	sp,a
      0001EF D0 06            [24]  941 	pop	ar6
      0001F1 D0 07            [24]  942 	pop	ar7
                                    943 ;	main.c:112: return number;
      0001F3 8E 82            [24]  944 	mov	dpl,r6
      0001F5 8F 83            [24]  945 	mov	dph,r7
      0001F7 22               [24]  946 	ret
      0001F8                        947 00103$:
                                    948 ;	main.c:116: printf_tiny("not a valid input\r\n");
      0001F8 74r87            [12]  949 	mov	a,#___str_8
      0001FA C0 E0            [24]  950 	push	acc
      0001FC 74s00            [12]  951 	mov	a,#(___str_8 >> 8)
      0001FE C0 E0            [24]  952 	push	acc
      000200 12r00r00         [24]  953 	lcall	_printf_tiny
      000203 15 81            [12]  954 	dec	sp
      000205 15 81            [12]  955 	dec	sp
                                    956 ;	main.c:117: goto again;
                                    957 ;	main.c:120: }
      000207 02r00r34         [24]  958 	ljmp	00101$
                                    959 ;------------------------------------------------------------
                                    960 ;Allocation info for local variables in function 'getinput_30_300'
                                    961 ;------------------------------------------------------------
                                    962 ;q                         Allocated with name '_getinput_30_300_q_65536_54'
                                    963 ;r                         Allocated with name '_getinput_30_300_r_65536_54'
                                    964 ;s                         Allocated with name '_getinput_30_300_s_65536_54'
                                    965 ;num_new                   Allocated with name '_getinput_30_300_num_new_65536_54'
                                    966 ;x                         Allocated with name '_getinput_30_300_x_65537_55'
                                    967 ;y                         Allocated with name '_getinput_30_300_y_65538_56'
                                    968 ;z                         Allocated with name '_getinput_30_300_z_65539_57'
                                    969 ;------------------------------------------------------------
                                    970 ;	main.c:125: int getinput_30_300()
                                    971 ;	-----------------------------------------
                                    972 ;	 function getinput_30_300
                                    973 ;	-----------------------------------------
      00020A                        974 _getinput_30_300:
                                    975 ;	main.c:132: again1: printf_tiny("Enter a value divisible btw 30 and 300\r\n");
      00020A                        976 00101$:
      00020A 74r9B            [12]  977 	mov	a,#___str_9
      00020C C0 E0            [24]  978 	push	acc
      00020E 74s00            [12]  979 	mov	a,#(___str_9 >> 8)
      000210 C0 E0            [24]  980 	push	acc
      000212 12r00r00         [24]  981 	lcall	_printf_tiny
      000215 15 81            [12]  982 	dec	sp
      000217 15 81            [12]  983 	dec	sp
                                    984 ;	main.c:134: q = getchar();
      000219 12r00r26         [24]  985 	lcall	_getchar
      00021C E5 82            [12]  986 	mov	a,dpl
      00021E 85 83 F0         [24]  987 	mov	b,dph
                                    988 ;	main.c:135: int x=q-'0';
      000221 24 D0            [12]  989 	add	a,#0xd0
      000223 FE               [12]  990 	mov	r6,a
      000224 E5 F0            [12]  991 	mov	a,b
      000226 34 FF            [12]  992 	addc	a,#0xff
      000228 FF               [12]  993 	mov	r7,a
                                    994 ;	main.c:136: printf_tiny(" q = %d \r\n", x);
      000229 C0 07            [24]  995 	push	ar7
      00022B C0 06            [24]  996 	push	ar6
      00022D C0 06            [24]  997 	push	ar6
      00022F C0 07            [24]  998 	push	ar7
      000231 74rC4            [12]  999 	mov	a,#___str_10
      000233 C0 E0            [24] 1000 	push	acc
      000235 74s00            [12] 1001 	mov	a,#(___str_10 >> 8)
      000237 C0 E0            [24] 1002 	push	acc
      000239 12r00r00         [24] 1003 	lcall	_printf_tiny
      00023C E5 81            [12] 1004 	mov	a,sp
      00023E 24 FC            [12] 1005 	add	a,#0xfc
      000240 F5 81            [12] 1006 	mov	sp,a
                                   1007 ;	main.c:138: r= getchar();
      000242 12r00r26         [24] 1008 	lcall	_getchar
      000245 E5 82            [12] 1009 	mov	a,dpl
      000247 85 83 F0         [24] 1010 	mov	b,dph
                                   1011 ;	main.c:139: int y=r-'0';
      00024A 24 D0            [12] 1012 	add	a,#0xd0
      00024C FC               [12] 1013 	mov	r4,a
      00024D E5 F0            [12] 1014 	mov	a,b
      00024F 34 FF            [12] 1015 	addc	a,#0xff
      000251 FD               [12] 1016 	mov	r5,a
                                   1017 ;	main.c:140: printf_tiny(" r = %d \r\n", y);
      000252 C0 05            [24] 1018 	push	ar5
      000254 C0 04            [24] 1019 	push	ar4
      000256 C0 04            [24] 1020 	push	ar4
      000258 C0 05            [24] 1021 	push	ar5
      00025A 74rCF            [12] 1022 	mov	a,#___str_11
      00025C C0 E0            [24] 1023 	push	acc
      00025E 74s00            [12] 1024 	mov	a,#(___str_11 >> 8)
      000260 C0 E0            [24] 1025 	push	acc
      000262 12r00r00         [24] 1026 	lcall	_printf_tiny
      000265 E5 81            [12] 1027 	mov	a,sp
      000267 24 FC            [12] 1028 	add	a,#0xfc
      000269 F5 81            [12] 1029 	mov	sp,a
                                   1030 ;	main.c:142: s= getchar();
      00026B 12r00r26         [24] 1031 	lcall	_getchar
      00026E E5 82            [12] 1032 	mov	a,dpl
      000270 85 83 F0         [24] 1033 	mov	b,dph
                                   1034 ;	main.c:143: int z=s-'0';
      000273 24 D0            [12] 1035 	add	a,#0xd0
      000275 FA               [12] 1036 	mov	r2,a
      000276 E5 F0            [12] 1037 	mov	a,b
      000278 34 FF            [12] 1038 	addc	a,#0xff
      00027A FB               [12] 1039 	mov	r3,a
                                   1040 ;	main.c:144: printf_tiny(" s = %d \r\n", z);
      00027B C0 03            [24] 1041 	push	ar3
      00027D C0 02            [24] 1042 	push	ar2
      00027F C0 02            [24] 1043 	push	ar2
      000281 C0 03            [24] 1044 	push	ar3
      000283 74rDA            [12] 1045 	mov	a,#___str_12
      000285 C0 E0            [24] 1046 	push	acc
      000287 74s00            [12] 1047 	mov	a,#(___str_12 >> 8)
      000289 C0 E0            [24] 1048 	push	acc
      00028B 12r00r00         [24] 1049 	lcall	_printf_tiny
      00028E E5 81            [12] 1050 	mov	a,sp
      000290 24 FC            [12] 1051 	add	a,#0xfc
      000292 F5 81            [12] 1052 	mov	sp,a
      000294 D0 02            [24] 1053 	pop	ar2
      000296 D0 03            [24] 1054 	pop	ar3
      000298 D0 04            [24] 1055 	pop	ar4
      00029A D0 05            [24] 1056 	pop	ar5
      00029C D0 06            [24] 1057 	pop	ar6
      00029E D0 07            [24] 1058 	pop	ar7
                                   1059 ;	main.c:146: num_new= ((x*100)+(y*10)+z);
      0002A0 90r00r00         [24] 1060 	mov	dptr,#__mulint_PARM_2
      0002A3 EE               [12] 1061 	mov	a,r6
      0002A4 F0               [24] 1062 	movx	@dptr,a
      0002A5 EF               [12] 1063 	mov	a,r7
      0002A6 A3               [24] 1064 	inc	dptr
      0002A7 F0               [24] 1065 	movx	@dptr,a
      0002A8 90 00 64         [24] 1066 	mov	dptr,#0x0064
      0002AB C0 05            [24] 1067 	push	ar5
      0002AD C0 04            [24] 1068 	push	ar4
      0002AF C0 03            [24] 1069 	push	ar3
      0002B1 C0 02            [24] 1070 	push	ar2
      0002B3 12r00r00         [24] 1071 	lcall	__mulint
      0002B6 AE 82            [24] 1072 	mov	r6,dpl
      0002B8 AF 83            [24] 1073 	mov	r7,dph
      0002BA D0 02            [24] 1074 	pop	ar2
      0002BC D0 03            [24] 1075 	pop	ar3
      0002BE D0 04            [24] 1076 	pop	ar4
      0002C0 D0 05            [24] 1077 	pop	ar5
      0002C2 90r00r00         [24] 1078 	mov	dptr,#__mulint_PARM_2
      0002C5 EC               [12] 1079 	mov	a,r4
      0002C6 F0               [24] 1080 	movx	@dptr,a
      0002C7 ED               [12] 1081 	mov	a,r5
      0002C8 A3               [24] 1082 	inc	dptr
      0002C9 F0               [24] 1083 	movx	@dptr,a
      0002CA 90 00 0A         [24] 1084 	mov	dptr,#0x000a
      0002CD C0 07            [24] 1085 	push	ar7
      0002CF C0 06            [24] 1086 	push	ar6
      0002D1 C0 03            [24] 1087 	push	ar3
      0002D3 C0 02            [24] 1088 	push	ar2
      0002D5 12r00r00         [24] 1089 	lcall	__mulint
      0002D8 AC 82            [24] 1090 	mov	r4,dpl
      0002DA AD 83            [24] 1091 	mov	r5,dph
      0002DC D0 02            [24] 1092 	pop	ar2
      0002DE D0 03            [24] 1093 	pop	ar3
      0002E0 D0 06            [24] 1094 	pop	ar6
      0002E2 D0 07            [24] 1095 	pop	ar7
      0002E4 EC               [12] 1096 	mov	a,r4
      0002E5 2E               [12] 1097 	add	a,r6
      0002E6 FE               [12] 1098 	mov	r6,a
      0002E7 ED               [12] 1099 	mov	a,r5
      0002E8 3F               [12] 1100 	addc	a,r7
      0002E9 FF               [12] 1101 	mov	r7,a
      0002EA EA               [12] 1102 	mov	a,r2
      0002EB 2E               [12] 1103 	add	a,r6
      0002EC FE               [12] 1104 	mov	r6,a
      0002ED EB               [12] 1105 	mov	a,r3
      0002EE 3F               [12] 1106 	addc	a,r7
      0002EF FF               [12] 1107 	mov	r7,a
                                   1108 ;	main.c:147: printf_tiny("new value of buffer is = %d",num_new);
      0002F0 C0 07            [24] 1109 	push	ar7
      0002F2 C0 06            [24] 1110 	push	ar6
      0002F4 C0 06            [24] 1111 	push	ar6
      0002F6 C0 07            [24] 1112 	push	ar7
      0002F8 74rE5            [12] 1113 	mov	a,#___str_13
      0002FA C0 E0            [24] 1114 	push	acc
      0002FC 74s00            [12] 1115 	mov	a,#(___str_13 >> 8)
      0002FE C0 E0            [24] 1116 	push	acc
      000300 12r00r00         [24] 1117 	lcall	_printf_tiny
      000303 E5 81            [12] 1118 	mov	a,sp
      000305 24 FC            [12] 1119 	add	a,#0xfc
      000307 F5 81            [12] 1120 	mov	sp,a
      000309 D0 06            [24] 1121 	pop	ar6
      00030B D0 07            [24] 1122 	pop	ar7
                                   1123 ;	main.c:148: if ((num_new>=30)&&(num_new<=300))
      00030D 8E 04            [24] 1124 	mov	ar4,r6
      00030F 8F 05            [24] 1125 	mov	ar5,r7
      000311 C3               [12] 1126 	clr	c
      000312 EC               [12] 1127 	mov	a,r4
      000313 94 1E            [12] 1128 	subb	a,#0x1e
      000315 ED               [12] 1129 	mov	a,r5
      000316 94 00            [12] 1130 	subb	a,#0x00
      000318 50 03            [24] 1131 	jnc	00120$
      00031A 02r02r0A         [24] 1132 	ljmp	00101$
      00031D                       1133 00120$:
      00031D 8E 04            [24] 1134 	mov	ar4,r6
      00031F 8F 05            [24] 1135 	mov	ar5,r7
      000321 C3               [12] 1136 	clr	c
      000322 74 2C            [12] 1137 	mov	a,#0x2c
      000324 9C               [12] 1138 	subb	a,r4
      000325 74 01            [12] 1139 	mov	a,#0x01
      000327 9D               [12] 1140 	subb	a,r5
      000328 50 03            [24] 1141 	jnc	00121$
      00032A 02r02r0A         [24] 1142 	ljmp	00101$
      00032D                       1143 00121$:
                                   1144 ;	main.c:149: return num_new;
      00032D 8E 82            [24] 1145 	mov	dpl,r6
      00032F 8F 83            [24] 1146 	mov	dph,r7
                                   1147 ;	main.c:151: goto again1;
                                   1148 ;	main.c:154: }
      000331 22               [24] 1149 	ret
                                   1150 ;------------------------------------------------------------
                                   1151 ;Allocation info for local variables in function 'del_num'
                                   1152 ;------------------------------------------------------------
                                   1153 ;P                         Allocated with name '_del_num_P_65536_58'
                                   1154 ;Q                         Allocated with name '_del_num_Q_65536_58'
                                   1155 ;number3                   Allocated with name '_del_num_number3_65536_58'
                                   1156 ;A                         Allocated with name '_del_num_A_65537_59'
                                   1157 ;B                         Allocated with name '_del_num_B_65538_60'
                                   1158 ;------------------------------------------------------------
                                   1159 ;	main.c:158: int del_num()
                                   1160 ;	-----------------------------------------
                                   1161 ;	 function del_num
                                   1162 ;	-----------------------------------------
      000332                       1163 _del_num:
                                   1164 ;	main.c:164: printf_tiny("enter the number of buffer to delete");
      000332 74r01            [12] 1165 	mov	a,#___str_14
      000334 C0 E0            [24] 1166 	push	acc
      000336 74s01            [12] 1167 	mov	a,#(___str_14 >> 8)
      000338 C0 E0            [24] 1168 	push	acc
      00033A 12r00r00         [24] 1169 	lcall	_printf_tiny
      00033D 15 81            [12] 1170 	dec	sp
      00033F 15 81            [12] 1171 	dec	sp
                                   1172 ;	main.c:166: P= getchar();
      000341 12r00r26         [24] 1173 	lcall	_getchar
      000344 E5 82            [12] 1174 	mov	a,dpl
      000346 85 83 F0         [24] 1175 	mov	b,dph
                                   1176 ;	main.c:167: int A = P-'0';
      000349 24 D0            [12] 1177 	add	a,#0xd0
      00034B FE               [12] 1178 	mov	r6,a
      00034C E5 F0            [12] 1179 	mov	a,b
      00034E 34 FF            [12] 1180 	addc	a,#0xff
      000350 FF               [12] 1181 	mov	r7,a
                                   1182 ;	main.c:168: Q= getchar();
      000351 C0 07            [24] 1183 	push	ar7
      000353 C0 06            [24] 1184 	push	ar6
      000355 12r00r26         [24] 1185 	lcall	_getchar
      000358 E5 82            [12] 1186 	mov	a,dpl
      00035A 85 83 F0         [24] 1187 	mov	b,dph
      00035D D0 06            [24] 1188 	pop	ar6
      00035F D0 07            [24] 1189 	pop	ar7
                                   1190 ;	main.c:169: int B = Q-'0';
      000361 24 D0            [12] 1191 	add	a,#0xd0
      000363 FC               [12] 1192 	mov	r4,a
      000364 E5 F0            [12] 1193 	mov	a,b
      000366 34 FF            [12] 1194 	addc	a,#0xff
      000368 FD               [12] 1195 	mov	r5,a
                                   1196 ;	main.c:170: number3 = ((A*10)+B);
      000369 90r00r00         [24] 1197 	mov	dptr,#__mulint_PARM_2
      00036C EE               [12] 1198 	mov	a,r6
      00036D F0               [24] 1199 	movx	@dptr,a
      00036E EF               [12] 1200 	mov	a,r7
      00036F A3               [24] 1201 	inc	dptr
      000370 F0               [24] 1202 	movx	@dptr,a
      000371 90 00 0A         [24] 1203 	mov	dptr,#0x000a
      000374 C0 05            [24] 1204 	push	ar5
      000376 C0 04            [24] 1205 	push	ar4
      000378 12r00r00         [24] 1206 	lcall	__mulint
      00037B E5 82            [12] 1207 	mov	a,dpl
      00037D 85 83 F0         [24] 1208 	mov	b,dph
      000380 D0 04            [24] 1209 	pop	ar4
      000382 D0 05            [24] 1210 	pop	ar5
      000384 2C               [12] 1211 	add	a,r4
      000385 FC               [12] 1212 	mov	r4,a
      000386 ED               [12] 1213 	mov	a,r5
      000387 35 F0            [12] 1214 	addc	a,b
                                   1215 ;	main.c:172: return number3;
                                   1216 ;	main.c:173: }
      000389 8C 82            [24] 1217 	mov	dpl,r4
      00038B F5 83            [12] 1218 	mov	dph,a
      00038D 22               [24] 1219 	ret
                                   1220 ;------------------------------------------------------------
                                   1221 ;Allocation info for local variables in function 'main'
                                   1222 ;------------------------------------------------------------
                                   1223 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1224 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                   1225 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                   1226 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                   1227 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                   1228 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                   1229 ;num                       Allocated with name '_main_num_65536_61'
                                   1230 ;number2                   Allocated with name '_main_number2_65536_61'
                                   1231 ;j                         Allocated with name '_main_j_65536_61'
                                   1232 ;t                         Allocated with name '_main_t_65536_61'
                                   1233 ;buff_size                 Allocated with name '_main_buff_size_65536_61'
                                   1234 ;num_del                   Allocated with name '_main_num_del_65536_61'
                                   1235 ;total_buffer_count        Allocated with name '_main_total_buffer_count_65536_61'
                                   1236 ;count                     Allocated with name '_main_count_65536_61'
                                   1237 ;buff_0_count              Allocated with name '_main_buff_0_count_65536_61'
                                   1238 ;p                         Allocated with name '_main_p_196609_66'
                                   1239 ;m                         Allocated with name '_main_m_262144_78'
                                   1240 ;------------------------------------------------------------
                                   1241 ;	main.c:175: void main()
                                   1242 ;	-----------------------------------------
                                   1243 ;	 function main
                                   1244 ;	-----------------------------------------
      00038E                       1245 _main:
                                   1246 ;	main.c:189: num = getinput();
      00038E 12r00r34         [24] 1247 	lcall	_getinput
      000391 85 82*0A         [24] 1248 	mov	_main_sloc5_1_0,dpl
      000394 85 83*0B         [24] 1249 	mov	(_main_sloc5_1_0 + 1),dph
                                   1250 ;	main.c:190: printf_tiny("the number is %d",num);
      000397 C0*0A            [24] 1251 	push	_main_sloc5_1_0
      000399 C0*0B            [24] 1252 	push	(_main_sloc5_1_0 + 1)
      00039B 74r26            [12] 1253 	mov	a,#___str_15
      00039D C0 E0            [24] 1254 	push	acc
      00039F 74s01            [12] 1255 	mov	a,#(___str_15 >> 8)
      0003A1 C0 E0            [24] 1256 	push	acc
      0003A3 12r00r00         [24] 1257 	lcall	_printf_tiny
      0003A6 E5 81            [12] 1258 	mov	a,sp
      0003A8 24 FC            [12] 1259 	add	a,#0xfc
      0003AA F5 81            [12] 1260 	mov	sp,a
                                   1261 ;	main.c:192: buffer_0 = (char*) malloc(num); // malloc num bytes and store in buffer_0
      0003AC 85*0A 82         [24] 1262 	mov	dpl,_main_sloc5_1_0
      0003AF 85*0B 83         [24] 1263 	mov	dph,(_main_sloc5_1_0 + 1)
      0003B2 12r00r00         [24] 1264 	lcall	_malloc
      0003B5 AC 82            [24] 1265 	mov	r4,dpl
      0003B7 AD 83            [24] 1266 	mov	r5,dph
      0003B9 90r12rC0         [24] 1267 	mov	dptr,#_buffer_0
      0003BC EC               [12] 1268 	mov	a,r4
      0003BD F0               [24] 1269 	movx	@dptr,a
      0003BE ED               [12] 1270 	mov	a,r5
      0003BF A3               [24] 1271 	inc	dptr
      0003C0 F0               [24] 1272 	movx	@dptr,a
                                   1273 ;	main.c:193: buffer_0_add = (unsigned int)buffer_0; //printing the starting address of buffer_0
      0003C1 8C 02            [24] 1274 	mov	ar2,r4
      0003C3 8D 03            [24] 1275 	mov	ar3,r5
      0003C5 90r13r28         [24] 1276 	mov	dptr,#_buffer_0_add
      0003C8 EA               [12] 1277 	mov	a,r2
      0003C9 F0               [24] 1278 	movx	@dptr,a
      0003CA EB               [12] 1279 	mov	a,r3
      0003CB A3               [24] 1280 	inc	dptr
      0003CC F0               [24] 1281 	movx	@dptr,a
                                   1282 ;	main.c:195: if(buffer_0 !=NULL)
      0003CD EC               [12] 1283 	mov	a,r4
      0003CE 4D               [12] 1284 	orl	a,r5
      0003CF 60 2A            [24] 1285 	jz	00102$
                                   1286 ;	main.c:197: printf_tiny("malloc for buffer0 is successful\r\n");
      0003D1 74r37            [12] 1287 	mov	a,#___str_16
      0003D3 C0 E0            [24] 1288 	push	acc
      0003D5 74s01            [12] 1289 	mov	a,#(___str_16 >> 8)
      0003D7 C0 E0            [24] 1290 	push	acc
      0003D9 12r00r00         [24] 1291 	lcall	_printf_tiny
      0003DC 15 81            [12] 1292 	dec	sp
      0003DE 15 81            [12] 1293 	dec	sp
                                   1294 ;	main.c:198: printf_tiny("starting address of buffer 0 is %x\r\n",buffer_0_add);
      0003E0 90r13r28         [24] 1295 	mov	dptr,#_buffer_0_add
      0003E3 E0               [24] 1296 	movx	a,@dptr
      0003E4 C0 E0            [24] 1297 	push	acc
      0003E6 A3               [24] 1298 	inc	dptr
      0003E7 E0               [24] 1299 	movx	a,@dptr
      0003E8 C0 E0            [24] 1300 	push	acc
      0003EA 74r5A            [12] 1301 	mov	a,#___str_17
      0003EC C0 E0            [24] 1302 	push	acc
      0003EE 74s01            [12] 1303 	mov	a,#(___str_17 >> 8)
      0003F0 C0 E0            [24] 1304 	push	acc
      0003F2 12r00r00         [24] 1305 	lcall	_printf_tiny
      0003F5 E5 81            [12] 1306 	mov	a,sp
      0003F7 24 FC            [12] 1307 	add	a,#0xfc
      0003F9 F5 81            [12] 1308 	mov	sp,a
      0003FB                       1309 00102$:
                                   1310 ;	main.c:201: buffer_1=(char *)malloc(num); // malloc num bytes and store in buffer_1
      0003FB 85*0A 82         [24] 1311 	mov	dpl,_main_sloc5_1_0
      0003FE 85*0B 83         [24] 1312 	mov	dph,(_main_sloc5_1_0 + 1)
      000401 12r00r00         [24] 1313 	lcall	_malloc
      000404 AC 82            [24] 1314 	mov	r4,dpl
      000406 AD 83            [24] 1315 	mov	r5,dph
      000408 90r12rC2         [24] 1316 	mov	dptr,#_buffer_1
      00040B EC               [12] 1317 	mov	a,r4
      00040C F0               [24] 1318 	movx	@dptr,a
      00040D ED               [12] 1319 	mov	a,r5
      00040E A3               [24] 1320 	inc	dptr
      00040F F0               [24] 1321 	movx	@dptr,a
                                   1322 ;	main.c:202: buffer_1_add = (unsigned int)buffer_1; //printing the starting address of buffer_1
      000410 8C 02            [24] 1323 	mov	ar2,r4
      000412 8D 03            [24] 1324 	mov	ar3,r5
      000414 90r13r2A         [24] 1325 	mov	dptr,#_buffer_1_add
      000417 EA               [12] 1326 	mov	a,r2
      000418 F0               [24] 1327 	movx	@dptr,a
      000419 EB               [12] 1328 	mov	a,r3
      00041A A3               [24] 1329 	inc	dptr
      00041B F0               [24] 1330 	movx	@dptr,a
                                   1331 ;	main.c:204: if(buffer_1 !=NULL)
      00041C EC               [12] 1332 	mov	a,r4
      00041D 4D               [12] 1333 	orl	a,r5
      00041E 60 2A            [24] 1334 	jz	00193$
                                   1335 ;	main.c:206: printf_tiny("malloc for buffer1 is successful\r\n");
      000420 74r7F            [12] 1336 	mov	a,#___str_18
      000422 C0 E0            [24] 1337 	push	acc
      000424 74s01            [12] 1338 	mov	a,#(___str_18 >> 8)
      000426 C0 E0            [24] 1339 	push	acc
      000428 12r00r00         [24] 1340 	lcall	_printf_tiny
      00042B 15 81            [12] 1341 	dec	sp
      00042D 15 81            [12] 1342 	dec	sp
                                   1343 ;	main.c:207: printf_tiny("starting address of buffer 1 is %x\r\n",buffer_1_add);
      00042F 90r13r2A         [24] 1344 	mov	dptr,#_buffer_1_add
      000432 E0               [24] 1345 	movx	a,@dptr
      000433 C0 E0            [24] 1346 	push	acc
      000435 A3               [24] 1347 	inc	dptr
      000436 E0               [24] 1348 	movx	a,@dptr
      000437 C0 E0            [24] 1349 	push	acc
      000439 74rA2            [12] 1350 	mov	a,#___str_19
      00043B C0 E0            [24] 1351 	push	acc
      00043D 74s01            [12] 1352 	mov	a,#(___str_19 >> 8)
      00043F C0 E0            [24] 1353 	push	acc
      000441 12r00r00         [24] 1354 	lcall	_printf_tiny
      000444 E5 81            [12] 1355 	mov	a,sp
      000446 24 FC            [12] 1356 	add	a,#0xfc
      000448 F5 81            [12] 1357 	mov	sp,a
                                   1358 ;	main.c:210: while(1)
      00044A                       1359 00193$:
      00044A 7C 00            [12] 1360 	mov	r4,#0x00
      00044C 7D 00            [12] 1361 	mov	r5,#0x00
      00044E 75*06 02         [24] 1362 	mov	_main_sloc3_1_0,#0x02
                                   1363 ;	1-genFromRTrack replaced	mov	(_main_sloc3_1_0 + 1),#0x00
      000451 8D*07            [24] 1364 	mov	(_main_sloc3_1_0 + 1),r5
      000453 E4               [12] 1365 	clr	a
      000454 F5*08            [12] 1366 	mov	_main_sloc4_1_0,a
      000456 F5*09            [12] 1367 	mov	(_main_sloc4_1_0 + 1),a
      000458                       1368 00173$:
                                   1369 ;	main.c:212: printf_tiny("Enter a character\r\n");
      000458 C0 05            [24] 1370 	push	ar5
      00045A C0 04            [24] 1371 	push	ar4
      00045C 74rC7            [12] 1372 	mov	a,#___str_20
      00045E C0 E0            [24] 1373 	push	acc
      000460 74s01            [12] 1374 	mov	a,#(___str_20 >> 8)
      000462 C0 E0            [24] 1375 	push	acc
      000464 12r00r00         [24] 1376 	lcall	_printf_tiny
      000467 15 81            [12] 1377 	dec	sp
      000469 15 81            [12] 1378 	dec	sp
                                   1379 ;	main.c:213: input_char = getchar();// take input for storage
      00046B 12r00r26         [24] 1380 	lcall	_getchar
      00046E AA 82            [24] 1381 	mov	r2,dpl
      000470 AB 83            [24] 1382 	mov	r3,dph
      000472 90r13r2C         [24] 1383 	mov	dptr,#_input_char
      000475 EA               [12] 1384 	mov	a,r2
      000476 F0               [24] 1385 	movx	@dptr,a
      000477 EB               [12] 1386 	mov	a,r3
      000478 A3               [24] 1387 	inc	dptr
      000479 F0               [24] 1388 	movx	@dptr,a
                                   1389 ;	main.c:214: total_char++;
      00047A 90r00r02         [24] 1390 	mov	dptr,#_total_char
      00047D E0               [24] 1391 	movx	a,@dptr
      00047E 24 01            [12] 1392 	add	a,#0x01
      000480 F0               [24] 1393 	movx	@dptr,a
      000481 A3               [24] 1394 	inc	dptr
      000482 E0               [24] 1395 	movx	a,@dptr
      000483 34 00            [12] 1396 	addc	a,#0x00
      000485 F0               [24] 1397 	movx	@dptr,a
                                   1398 ;	main.c:215: putchar(input_char);
      000486 8A 82            [24] 1399 	mov	dpl,r2
      000488 8B 83            [24] 1400 	mov	dph,r3
      00048A 12r00r07         [24] 1401 	lcall	_putchar
                                   1402 ;	main.c:217: printf_tiny("the input character is %d\r\n", input_char);
      00048D 90r13r2C         [24] 1403 	mov	dptr,#_input_char
      000490 E0               [24] 1404 	movx	a,@dptr
      000491 C0 E0            [24] 1405 	push	acc
      000493 A3               [24] 1406 	inc	dptr
      000494 E0               [24] 1407 	movx	a,@dptr
      000495 C0 E0            [24] 1408 	push	acc
      000497 74rDB            [12] 1409 	mov	a,#___str_21
      000499 C0 E0            [24] 1410 	push	acc
      00049B 74s01            [12] 1411 	mov	a,#(___str_21 >> 8)
      00049D C0 E0            [24] 1412 	push	acc
      00049F 12r00r00         [24] 1413 	lcall	_printf_tiny
      0004A2 E5 81            [12] 1414 	mov	a,sp
      0004A4 24 FC            [12] 1415 	add	a,#0xfc
      0004A6 F5 81            [12] 1416 	mov	sp,a
      0004A8 D0 04            [24] 1417 	pop	ar4
      0004AA D0 05            [24] 1418 	pop	ar5
                                   1419 ;	main.c:220: if(((count<num)&&(input_char>='a')&&(input_char<='z')))
      0004AC 8C 02            [24] 1420 	mov	ar2,r4
      0004AE 8D 03            [24] 1421 	mov	ar3,r5
      0004B0 C3               [12] 1422 	clr	c
      0004B1 EA               [12] 1423 	mov	a,r2
      0004B2 95*0A            [12] 1424 	subb	a,_main_sloc5_1_0
      0004B4 EB               [12] 1425 	mov	a,r3
      0004B5 95*0B            [12] 1426 	subb	a,(_main_sloc5_1_0 + 1)
      0004B7 40 03            [24] 1427 	jc	00348$
      0004B9 02r05r6E         [24] 1428 	ljmp	00168$
      0004BC                       1429 00348$:
      0004BC 90r13r2C         [24] 1430 	mov	dptr,#_input_char
      0004BF E0               [24] 1431 	movx	a,@dptr
      0004C0 F5*00            [12] 1432 	mov	_main_sloc0_1_0,a
      0004C2 A3               [24] 1433 	inc	dptr
      0004C3 E0               [24] 1434 	movx	a,@dptr
      0004C4 F5*01            [12] 1435 	mov	(_main_sloc0_1_0 + 1),a
      0004C6 C3               [12] 1436 	clr	c
      0004C7 E5*00            [12] 1437 	mov	a,_main_sloc0_1_0
      0004C9 94 61            [12] 1438 	subb	a,#0x61
      0004CB E5*01            [12] 1439 	mov	a,(_main_sloc0_1_0 + 1)
      0004CD 64 80            [12] 1440 	xrl	a,#0x80
      0004CF 94 80            [12] 1441 	subb	a,#0x80
      0004D1 50 03            [24] 1442 	jnc	00349$
      0004D3 02r05r6E         [24] 1443 	ljmp	00168$
      0004D6                       1444 00349$:
      0004D6 C3               [12] 1445 	clr	c
      0004D7 74 7A            [12] 1446 	mov	a,#0x7a
      0004D9 95*00            [12] 1447 	subb	a,_main_sloc0_1_0
      0004DB 74 80            [12] 1448 	mov	a,#(0x00 ^ 0x80)
      0004DD 85*01 F0         [24] 1449 	mov	b,(_main_sloc0_1_0 + 1)
      0004E0 63 F0 80         [24] 1450 	xrl	b,#0x80
      0004E3 95 F0            [12] 1451 	subb	a,b
      0004E5 50 03            [24] 1452 	jnc	00350$
      0004E7 02r05r6E         [24] 1453 	ljmp	00168$
      0004EA                       1454 00350$:
                                   1455 ;	main.c:222: storage++;
      0004EA 90r00r00         [24] 1456 	mov	dptr,#_storage
      0004ED E0               [24] 1457 	movx	a,@dptr
      0004EE 24 01            [12] 1458 	add	a,#0x01
      0004F0 F0               [24] 1459 	movx	@dptr,a
      0004F1 A3               [24] 1460 	inc	dptr
      0004F2 E0               [24] 1461 	movx	a,@dptr
      0004F3 34 00            [12] 1462 	addc	a,#0x00
      0004F5 F0               [24] 1463 	movx	@dptr,a
                                   1464 ;	main.c:223: *((buffer_0)+count) = input_char;
      0004F6 90r12rC0         [24] 1465 	mov	dptr,#_buffer_0
      0004F9 E0               [24] 1466 	movx	a,@dptr
      0004FA FA               [12] 1467 	mov	r2,a
      0004FB A3               [24] 1468 	inc	dptr
      0004FC E0               [24] 1469 	movx	a,@dptr
      0004FD FB               [12] 1470 	mov	r3,a
      0004FE EC               [12] 1471 	mov	a,r4
      0004FF 2A               [12] 1472 	add	a,r2
      000500 F5 82            [12] 1473 	mov	dpl,a
      000502 ED               [12] 1474 	mov	a,r5
      000503 3B               [12] 1475 	addc	a,r3
      000504 F5 83            [12] 1476 	mov	dph,a
      000506 E5*00            [12] 1477 	mov	a,_main_sloc0_1_0
      000508 F0               [24] 1478 	movx	@dptr,a
                                   1479 ;	main.c:224: int *p = ((buffer_0)+count);
      000509 90r12rC0         [24] 1480 	mov	dptr,#_buffer_0
      00050C E0               [24] 1481 	movx	a,@dptr
      00050D FA               [12] 1482 	mov	r2,a
      00050E A3               [24] 1483 	inc	dptr
      00050F E0               [24] 1484 	movx	a,@dptr
      000510 FB               [12] 1485 	mov	r3,a
      000511 EC               [12] 1486 	mov	a,r4
      000512 2A               [12] 1487 	add	a,r2
      000513 FA               [12] 1488 	mov	r2,a
      000514 ED               [12] 1489 	mov	a,r5
      000515 3B               [12] 1490 	addc	a,r3
      000516 FB               [12] 1491 	mov	r3,a
      000517 90r13r96         [24] 1492 	mov	dptr,#_main_p_196609_66
      00051A EA               [12] 1493 	mov	a,r2
      00051B F0               [24] 1494 	movx	@dptr,a
      00051C EB               [12] 1495 	mov	a,r3
      00051D A3               [24] 1496 	inc	dptr
      00051E F0               [24] 1497 	movx	@dptr,a
      00051F E4               [12] 1498 	clr	a
      000520 A3               [24] 1499 	inc	dptr
      000521 F0               [24] 1500 	movx	@dptr,a
                                   1501 ;	main.c:225: count++;
      000522 0C               [12] 1502 	inc	r4
      000523 BC 00 01         [24] 1503 	cjne	r4,#0x00,00351$
      000526 0D               [12] 1504 	inc	r5
      000527                       1505 00351$:
                                   1506 ;	main.c:226: printf_tiny("buffer is \r\n%p",p);
      000527 C0 05            [24] 1507 	push	ar5
      000529 C0 04            [24] 1508 	push	ar4
      00052B 90r13r96         [24] 1509 	mov	dptr,#_main_p_196609_66
      00052E E0               [24] 1510 	movx	a,@dptr
      00052F C0 E0            [24] 1511 	push	acc
      000531 A3               [24] 1512 	inc	dptr
      000532 E0               [24] 1513 	movx	a,@dptr
      000533 C0 E0            [24] 1514 	push	acc
      000535 A3               [24] 1515 	inc	dptr
      000536 E0               [24] 1516 	movx	a,@dptr
      000537 C0 E0            [24] 1517 	push	acc
      000539 74rF7            [12] 1518 	mov	a,#___str_22
      00053B C0 E0            [24] 1519 	push	acc
      00053D 74s01            [12] 1520 	mov	a,#(___str_22 >> 8)
      00053F C0 E0            [24] 1521 	push	acc
      000541 12r00r00         [24] 1522 	lcall	_printf_tiny
      000544 E5 81            [12] 1523 	mov	a,sp
      000546 24 FB            [12] 1524 	add	a,#0xfb
      000548 F5 81            [12] 1525 	mov	sp,a
      00054A D0 04            [24] 1526 	pop	ar4
      00054C D0 05            [24] 1527 	pop	ar5
                                   1528 ;	main.c:227: printf_tiny("count = %d\r\n",count);
      00054E C0 05            [24] 1529 	push	ar5
      000550 C0 04            [24] 1530 	push	ar4
      000552 C0 04            [24] 1531 	push	ar4
      000554 C0 05            [24] 1532 	push	ar5
      000556 74r06            [12] 1533 	mov	a,#___str_23
      000558 C0 E0            [24] 1534 	push	acc
      00055A 74s02            [12] 1535 	mov	a,#(___str_23 >> 8)
      00055C C0 E0            [24] 1536 	push	acc
      00055E 12r00r00         [24] 1537 	lcall	_printf_tiny
      000561 E5 81            [12] 1538 	mov	a,sp
      000563 24 FC            [12] 1539 	add	a,#0xfc
      000565 F5 81            [12] 1540 	mov	sp,a
      000567 D0 04            [24] 1541 	pop	ar4
      000569 D0 05            [24] 1542 	pop	ar5
      00056B 02r04r58         [24] 1543 	ljmp	00173$
      00056E                       1544 00168$:
                                   1545 ;	main.c:229: else if((count==num)&&(input_char != '-' )&&(input_char != '+')&&(input_char!='?')&&(input_char!='@')&&(input_char!='='))
      00056E 8C 02            [24] 1546 	mov	ar2,r4
      000570 8D 03            [24] 1547 	mov	ar3,r5
      000572 EA               [12] 1548 	mov	a,r2
      000573 B5*0A 68         [24] 1549 	cjne	a,_main_sloc5_1_0,00160$
      000576 EB               [12] 1550 	mov	a,r3
      000577 B5*0B 64         [24] 1551 	cjne	a,(_main_sloc5_1_0 + 1),00160$
      00057A 90r13r2C         [24] 1552 	mov	dptr,#_input_char
      00057D E0               [24] 1553 	movx	a,@dptr
      00057E F5*00            [12] 1554 	mov	_main_sloc0_1_0,a
      000580 A3               [24] 1555 	inc	dptr
      000581 E0               [24] 1556 	movx	a,@dptr
      000582 F5*01            [12] 1557 	mov	(_main_sloc0_1_0 + 1),a
      000584 74 2D            [12] 1558 	mov	a,#0x2d
      000586 B5*00 06         [24] 1559 	cjne	a,_main_sloc0_1_0,00354$
      000589 E4               [12] 1560 	clr	a
      00058A B5*01 02         [24] 1561 	cjne	a,(_main_sloc0_1_0 + 1),00354$
      00058D 80 4F            [24] 1562 	sjmp	00160$
      00058F                       1563 00354$:
      00058F 74 2B            [12] 1564 	mov	a,#0x2b
      000591 B5*00 06         [24] 1565 	cjne	a,_main_sloc0_1_0,00355$
      000594 E4               [12] 1566 	clr	a
      000595 B5*01 02         [24] 1567 	cjne	a,(_main_sloc0_1_0 + 1),00355$
      000598 80 44            [24] 1568 	sjmp	00160$
      00059A                       1569 00355$:
      00059A 74 3F            [12] 1570 	mov	a,#0x3f
      00059C B5*00 06         [24] 1571 	cjne	a,_main_sloc0_1_0,00356$
      00059F E4               [12] 1572 	clr	a
      0005A0 B5*01 02         [24] 1573 	cjne	a,(_main_sloc0_1_0 + 1),00356$
      0005A3 80 39            [24] 1574 	sjmp	00160$
      0005A5                       1575 00356$:
      0005A5 74 40            [12] 1576 	mov	a,#0x40
      0005A7 B5*00 06         [24] 1577 	cjne	a,_main_sloc0_1_0,00357$
      0005AA E4               [12] 1578 	clr	a
      0005AB B5*01 02         [24] 1579 	cjne	a,(_main_sloc0_1_0 + 1),00357$
      0005AE 80 2E            [24] 1580 	sjmp	00160$
      0005B0                       1581 00357$:
      0005B0 74 3D            [12] 1582 	mov	a,#0x3d
      0005B2 B5*00 06         [24] 1583 	cjne	a,_main_sloc0_1_0,00358$
      0005B5 E4               [12] 1584 	clr	a
      0005B6 B5*01 02         [24] 1585 	cjne	a,(_main_sloc0_1_0 + 1),00358$
      0005B9 80 23            [24] 1586 	sjmp	00160$
      0005BB                       1587 00358$:
                                   1588 ;	main.c:231: putchar(input_char);
      0005BB 85*00 82         [24] 1589 	mov	dpl,_main_sloc0_1_0
      0005BE 85*01 83         [24] 1590 	mov	dph,(_main_sloc0_1_0 + 1)
      0005C1 C0 05            [24] 1591 	push	ar5
      0005C3 C0 04            [24] 1592 	push	ar4
      0005C5 12r00r07         [24] 1593 	lcall	_putchar
                                   1594 ;	main.c:232: printf_tiny("buffer is full\r\n");
      0005C8 74r13            [12] 1595 	mov	a,#___str_24
      0005CA C0 E0            [24] 1596 	push	acc
      0005CC 74s02            [12] 1597 	mov	a,#(___str_24 >> 8)
      0005CE C0 E0            [24] 1598 	push	acc
      0005D0 12r00r00         [24] 1599 	lcall	_printf_tiny
      0005D3 15 81            [12] 1600 	dec	sp
      0005D5 15 81            [12] 1601 	dec	sp
      0005D7 D0 04            [24] 1602 	pop	ar4
      0005D9 D0 05            [24] 1603 	pop	ar5
      0005DB 02r04r58         [24] 1604 	ljmp	00173$
      0005DE                       1605 00160$:
                                   1606 ;	main.c:235: else if (input_char == '+')
      0005DE 90r13r2C         [24] 1607 	mov	dptr,#_input_char
      0005E1 E0               [24] 1608 	movx	a,@dptr
      0005E2 F5*00            [12] 1609 	mov	_main_sloc0_1_0,a
      0005E4 A3               [24] 1610 	inc	dptr
      0005E5 E0               [24] 1611 	movx	a,@dptr
      0005E6 F5*01            [12] 1612 	mov	(_main_sloc0_1_0 + 1),a
      0005E8 74 2B            [12] 1613 	mov	a,#0x2b
      0005EA B5*00 06         [24] 1614 	cjne	a,_main_sloc0_1_0,00359$
      0005ED E4               [12] 1615 	clr	a
      0005EE B5*01 02         [24] 1616 	cjne	a,(_main_sloc0_1_0 + 1),00359$
      0005F1 80 03            [24] 1617 	sjmp	00360$
      0005F3                       1618 00359$:
      0005F3 02r07r37         [24] 1619 	ljmp	00157$
      0005F6                       1620 00360$:
                                   1621 ;	main.c:237: printf_tiny(" Allocating a new buffer\r\n");
      0005F6 C0 05            [24] 1622 	push	ar5
      0005F8 C0 04            [24] 1623 	push	ar4
      0005FA 74r24            [12] 1624 	mov	a,#___str_25
      0005FC C0 E0            [24] 1625 	push	acc
      0005FE 74s02            [12] 1626 	mov	a,#(___str_25 >> 8)
      000600 C0 E0            [24] 1627 	push	acc
      000602 12r00r00         [24] 1628 	lcall	_printf_tiny
      000605 15 81            [12] 1629 	dec	sp
      000607 15 81            [12] 1630 	dec	sp
                                   1631 ;	main.c:238: printf_tiny("enter a new value between 30 and 300\r\n");
      000609 74r3F            [12] 1632 	mov	a,#___str_26
      00060B C0 E0            [24] 1633 	push	acc
      00060D 74s02            [12] 1634 	mov	a,#(___str_26 >> 8)
      00060F C0 E0            [24] 1635 	push	acc
      000611 12r00r00         [24] 1636 	lcall	_printf_tiny
      000614 15 81            [12] 1637 	dec	sp
      000616 15 81            [12] 1638 	dec	sp
                                   1639 ;	main.c:239: number2 = getinput_30_300(); // values between30 and 300 are accepted
      000618 12r02r0A         [24] 1640 	lcall	_getinput_30_300
      00061B 85 82*02         [24] 1641 	mov	_main_sloc1_1_0,dpl
      00061E 85 83*03         [24] 1642 	mov	(_main_sloc1_1_0 + 1),dph
                                   1643 ;	main.c:241: buffer_n[j] = (char*)malloc(number2); // allocating new buffer with memory
      000621 E5*08            [12] 1644 	mov	a,_main_sloc4_1_0
      000623 25*08            [12] 1645 	add	a,_main_sloc4_1_0
      000625 FA               [12] 1646 	mov	r2,a
      000626 E5*09            [12] 1647 	mov	a,(_main_sloc4_1_0 + 1)
      000628 33               [12] 1648 	rlc	a
      000629 FB               [12] 1649 	mov	r3,a
      00062A EA               [12] 1650 	mov	a,r2
      00062B 24rC4            [12] 1651 	add	a,#_buffer_n
      00062D F5*04            [12] 1652 	mov	_main_sloc2_1_0,a
      00062F EB               [12] 1653 	mov	a,r3
      000630 34s12            [12] 1654 	addc	a,#(_buffer_n >> 8)
      000632 F5*05            [12] 1655 	mov	(_main_sloc2_1_0 + 1),a
      000634 85*02 82         [24] 1656 	mov	dpl,_main_sloc1_1_0
      000637 85*03 83         [24] 1657 	mov	dph,(_main_sloc1_1_0 + 1)
      00063A 12r00r00         [24] 1658 	lcall	_malloc
      00063D AA 82            [24] 1659 	mov	r2,dpl
      00063F AB 83            [24] 1660 	mov	r3,dph
      000641 D0 04            [24] 1661 	pop	ar4
      000643 D0 05            [24] 1662 	pop	ar5
      000645 85*04 82         [24] 1663 	mov	dpl,_main_sloc2_1_0
      000648 85*05 83         [24] 1664 	mov	dph,(_main_sloc2_1_0 + 1)
      00064B EA               [12] 1665 	mov	a,r2
      00064C F0               [24] 1666 	movx	@dptr,a
      00064D EB               [12] 1667 	mov	a,r3
      00064E A3               [24] 1668 	inc	dptr
      00064F F0               [24] 1669 	movx	@dptr,a
                                   1670 ;	main.c:243: if(buffer_n[j]==NULL)
      000650 EA               [12] 1671 	mov	a,r2
      000651 4B               [12] 1672 	orl	a,r3
      000652 70 29            [24] 1673 	jnz	00106$
                                   1674 ;	main.c:245: printf_tiny("\n\rMemory Allocation for Buffer_%d Failed\n\rPress '+' to Try again\n\r",j+2);
      000654 74 02            [12] 1675 	mov	a,#0x02
      000656 25*08            [12] 1676 	add	a,_main_sloc4_1_0
      000658 FA               [12] 1677 	mov	r2,a
      000659 E4               [12] 1678 	clr	a
      00065A 35*09            [12] 1679 	addc	a,(_main_sloc4_1_0 + 1)
      00065C FB               [12] 1680 	mov	r3,a
      00065D C0 05            [24] 1681 	push	ar5
      00065F C0 04            [24] 1682 	push	ar4
      000661 C0 02            [24] 1683 	push	ar2
      000663 C0 03            [24] 1684 	push	ar3
      000665 74r66            [12] 1685 	mov	a,#___str_27
      000667 C0 E0            [24] 1686 	push	acc
      000669 74s02            [12] 1687 	mov	a,#(___str_27 >> 8)
      00066B C0 E0            [24] 1688 	push	acc
      00066D 12r00r00         [24] 1689 	lcall	_printf_tiny
      000670 E5 81            [12] 1690 	mov	a,sp
      000672 24 FC            [12] 1691 	add	a,#0xfc
      000674 F5 81            [12] 1692 	mov	sp,a
      000676 D0 04            [24] 1693 	pop	ar4
      000678 D0 05            [24] 1694 	pop	ar5
      00067A 02r04r58         [24] 1695 	ljmp	00173$
      00067D                       1696 00106$:
                                   1697 ;	main.c:249: printf_tiny("\n\rMemory Allocation Successful for Buffer_%d\n\r",(j+2));
      00067D C0 04            [24] 1698 	push	ar4
      00067F C0 05            [24] 1699 	push	ar5
      000681 74 02            [12] 1700 	mov	a,#0x02
      000683 25*08            [12] 1701 	add	a,_main_sloc4_1_0
      000685 FC               [12] 1702 	mov	r4,a
      000686 E4               [12] 1703 	clr	a
      000687 35*09            [12] 1704 	addc	a,(_main_sloc4_1_0 + 1)
      000689 FD               [12] 1705 	mov	r5,a
      00068A C0 05            [24] 1706 	push	ar5
      00068C C0 04            [24] 1707 	push	ar4
      00068E C0 04            [24] 1708 	push	ar4
      000690 C0 05            [24] 1709 	push	ar5
      000692 74rA9            [12] 1710 	mov	a,#___str_28
      000694 C0 E0            [24] 1711 	push	acc
      000696 74s02            [12] 1712 	mov	a,#(___str_28 >> 8)
      000698 C0 E0            [24] 1713 	push	acc
      00069A 12r00r00         [24] 1714 	lcall	_printf_tiny
      00069D E5 81            [12] 1715 	mov	a,sp
      00069F 24 FC            [12] 1716 	add	a,#0xfc
      0006A1 F5 81            [12] 1717 	mov	sp,a
      0006A3 D0 04            [24] 1718 	pop	ar4
      0006A5 D0 05            [24] 1719 	pop	ar5
                                   1720 ;	main.c:250: printf_tiny("\n\rBuffer_%d allocated of size %d\n\r",(j+2),number2);
      0006A7 C0 05            [24] 1721 	push	ar5
      0006A9 C0 04            [24] 1722 	push	ar4
      0006AB C0*02            [24] 1723 	push	_main_sloc1_1_0
      0006AD C0*03            [24] 1724 	push	(_main_sloc1_1_0 + 1)
      0006AF C0 04            [24] 1725 	push	ar4
      0006B1 C0 05            [24] 1726 	push	ar5
      0006B3 74rD8            [12] 1727 	mov	a,#___str_29
      0006B5 C0 E0            [24] 1728 	push	acc
      0006B7 74s02            [12] 1729 	mov	a,#(___str_29 >> 8)
      0006B9 C0 E0            [24] 1730 	push	acc
      0006BB 12r00r00         [24] 1731 	lcall	_printf_tiny
      0006BE E5 81            [12] 1732 	mov	a,sp
      0006C0 24 FA            [12] 1733 	add	a,#0xfa
      0006C2 F5 81            [12] 1734 	mov	sp,a
      0006C4 D0 04            [24] 1735 	pop	ar4
      0006C6 D0 05            [24] 1736 	pop	ar5
                                   1737 ;	main.c:251: printf_tiny("\n\rAddress of buffer_%d = 0x%x\n\r",(j+2),(uint16_t)(buffer_n[i]));
      0006C8 90r00r04         [24] 1738 	mov	dptr,#_i
      0006CB E0               [24] 1739 	movx	a,@dptr
      0006CC FA               [12] 1740 	mov	r2,a
      0006CD A3               [24] 1741 	inc	dptr
      0006CE E0               [24] 1742 	movx	a,@dptr
      0006CF FB               [12] 1743 	mov	r3,a
      0006D0 EA               [12] 1744 	mov	a,r2
      0006D1 2A               [12] 1745 	add	a,r2
      0006D2 FA               [12] 1746 	mov	r2,a
      0006D3 EB               [12] 1747 	mov	a,r3
      0006D4 33               [12] 1748 	rlc	a
      0006D5 FB               [12] 1749 	mov	r3,a
      0006D6 EA               [12] 1750 	mov	a,r2
      0006D7 24rC4            [12] 1751 	add	a,#_buffer_n
      0006D9 F5 82            [12] 1752 	mov	dpl,a
      0006DB EB               [12] 1753 	mov	a,r3
      0006DC 34s12            [12] 1754 	addc	a,#(_buffer_n >> 8)
      0006DE F5 83            [12] 1755 	mov	dph,a
      0006E0 E0               [24] 1756 	movx	a,@dptr
      0006E1 FA               [12] 1757 	mov	r2,a
      0006E2 A3               [24] 1758 	inc	dptr
      0006E3 E0               [24] 1759 	movx	a,@dptr
      0006E4 FB               [12] 1760 	mov	r3,a
      0006E5 C0 05            [24] 1761 	push	ar5
      0006E7 C0 04            [24] 1762 	push	ar4
      0006E9 C0 02            [24] 1763 	push	ar2
      0006EB C0 03            [24] 1764 	push	ar3
      0006ED C0 04            [24] 1765 	push	ar4
      0006EF C0 05            [24] 1766 	push	ar5
      0006F1 74rFB            [12] 1767 	mov	a,#___str_30
      0006F3 C0 E0            [24] 1768 	push	acc
      0006F5 74s02            [12] 1769 	mov	a,#(___str_30 >> 8)
      0006F7 C0 E0            [24] 1770 	push	acc
      0006F9 12r00r00         [24] 1771 	lcall	_printf_tiny
      0006FC E5 81            [12] 1772 	mov	a,sp
      0006FE 24 FA            [12] 1773 	add	a,#0xfa
      000700 F5 81            [12] 1774 	mov	sp,a
      000702 D0 04            [24] 1775 	pop	ar4
      000704 D0 05            [24] 1776 	pop	ar5
                                   1777 ;	main.c:252: buff_size[t]=number2;              //store size of newly allocated buffer to buff_size array
      000706 E5*06            [12] 1778 	mov	a,_main_sloc3_1_0
      000708 25*06            [12] 1779 	add	a,_main_sloc3_1_0
      00070A FC               [12] 1780 	mov	r4,a
      00070B E5*07            [12] 1781 	mov	a,(_main_sloc3_1_0 + 1)
      00070D 33               [12] 1782 	rlc	a
      00070E FD               [12] 1783 	mov	r5,a
      00070F EC               [12] 1784 	mov	a,r4
      000710 24r32            [12] 1785 	add	a,#_main_buff_size_65536_61
      000712 F5 82            [12] 1786 	mov	dpl,a
      000714 ED               [12] 1787 	mov	a,r5
      000715 34s13            [12] 1788 	addc	a,#(_main_buff_size_65536_61 >> 8)
      000717 F5 83            [12] 1789 	mov	dph,a
      000719 E5*02            [12] 1790 	mov	a,_main_sloc1_1_0
      00071B F0               [24] 1791 	movx	@dptr,a
      00071C E5*03            [12] 1792 	mov	a,(_main_sloc1_1_0 + 1)
      00071E A3               [24] 1793 	inc	dptr
      00071F F0               [24] 1794 	movx	@dptr,a
                                   1795 ;	main.c:253: t++;
      000720 05*06            [12] 1796 	inc	_main_sloc3_1_0
      000722 E4               [12] 1797 	clr	a
      000723 B5*06 02         [24] 1798 	cjne	a,_main_sloc3_1_0,00362$
      000726 05*07            [12] 1799 	inc	(_main_sloc3_1_0 + 1)
      000728                       1800 00362$:
                                   1801 ;	main.c:254: j++;
      000728 05*08            [12] 1802 	inc	_main_sloc4_1_0
      00072A E4               [12] 1803 	clr	a
      00072B B5*08 02         [24] 1804 	cjne	a,_main_sloc4_1_0,00363$
      00072E 05*09            [12] 1805 	inc	(_main_sloc4_1_0 + 1)
      000730                       1806 00363$:
      000730 D0 05            [24] 1807 	pop	ar5
      000732 D0 04            [24] 1808 	pop	ar4
      000734 02r04r58         [24] 1809 	ljmp	00173$
      000737                       1810 00157$:
                                   1811 ;	main.c:258: else if (input_char == '-')
      000737 74 2D            [12] 1812 	mov	a,#0x2d
      000739 B5*00 06         [24] 1813 	cjne	a,_main_sloc0_1_0,00364$
      00073C E4               [12] 1814 	clr	a
      00073D B5*01 02         [24] 1815 	cjne	a,(_main_sloc0_1_0 + 1),00364$
      000740 80 03            [24] 1816 	sjmp	00365$
      000742                       1817 00364$:
      000742 02r08rF1         [24] 1818 	ljmp	00154$
      000745                       1819 00365$:
                                   1820 ;	main.c:260: printf_tiny("\n\rEnter a valid buffer number\n\r");
      000745 C0 05            [24] 1821 	push	ar5
      000747 C0 04            [24] 1822 	push	ar4
      000749 74r1B            [12] 1823 	mov	a,#___str_31
      00074B C0 E0            [24] 1824 	push	acc
      00074D 74s03            [12] 1825 	mov	a,#(___str_31 >> 8)
      00074F C0 E0            [24] 1826 	push	acc
      000751 12r00r00         [24] 1827 	lcall	_printf_tiny
      000754 15 81            [12] 1828 	dec	sp
      000756 15 81            [12] 1829 	dec	sp
                                   1830 ;	main.c:261: num_del = del_num();
      000758 12r03r32         [24] 1831 	lcall	_del_num
      00075B AA 82            [24] 1832 	mov	r2,dpl
      00075D AB 83            [24] 1833 	mov	r3,dph
      00075F D0 04            [24] 1834 	pop	ar4
      000761 D0 05            [24] 1835 	pop	ar5
                                   1836 ;	main.c:263: if(num_del == 0)
      000763 EA               [12] 1837 	mov	a,r2
      000764 4B               [12] 1838 	orl	a,r3
      000765 70 1A            [24] 1839 	jnz	00116$
                                   1840 ;	main.c:265: printf_tiny("\n\rBuffer 0 cannot be deleted!\n\r");
      000767 C0 05            [24] 1841 	push	ar5
      000769 C0 04            [24] 1842 	push	ar4
      00076B 74r3B            [12] 1843 	mov	a,#___str_32
      00076D C0 E0            [24] 1844 	push	acc
      00076F 74s03            [12] 1845 	mov	a,#(___str_32 >> 8)
      000771 C0 E0            [24] 1846 	push	acc
      000773 12r00r00         [24] 1847 	lcall	_printf_tiny
      000776 15 81            [12] 1848 	dec	sp
      000778 15 81            [12] 1849 	dec	sp
      00077A D0 04            [24] 1850 	pop	ar4
      00077C D0 05            [24] 1851 	pop	ar5
      00077E 02r04r58         [24] 1852 	ljmp	00173$
      000781                       1853 00116$:
                                   1854 ;	main.c:267: else if(num_del == 1)
      000781 BA 01 64         [24] 1855 	cjne	r2,#0x01,00113$
      000784 BB 00 61         [24] 1856 	cjne	r3,#0x00,00113$
                                   1857 ;	main.c:269: free(buffer_1);
      000787 C0 04            [24] 1858 	push	ar4
      000789 C0 05            [24] 1859 	push	ar5
      00078B 90r12rC2         [24] 1860 	mov	dptr,#_buffer_1
      00078E E0               [24] 1861 	movx	a,@dptr
      00078F FC               [12] 1862 	mov	r4,a
      000790 A3               [24] 1863 	inc	dptr
      000791 E0               [24] 1864 	movx	a,@dptr
      000792 F9               [12] 1865 	mov	r1,a
      000793 7D 00            [12] 1866 	mov	r5,#0x00
      000795 8C 82            [24] 1867 	mov	dpl,r4
      000797 89 83            [24] 1868 	mov	dph,r1
      000799 8D F0            [24] 1869 	mov	b,r5
      00079B C0 05            [24] 1870 	push	ar5
      00079D C0 04            [24] 1871 	push	ar4
      00079F 12r00r00         [24] 1872 	lcall	_free
      0007A2 D0 04            [24] 1873 	pop	ar4
      0007A4 D0 05            [24] 1874 	pop	ar5
                                   1875 ;	main.c:270: printf_tiny("\n\rBuffer 1>%d\n\r",(unsigned int)buffer_1);
      0007A6 90r12rC2         [24] 1876 	mov	dptr,#_buffer_1
      0007A9 E0               [24] 1877 	movx	a,@dptr
      0007AA FC               [12] 1878 	mov	r4,a
      0007AB A3               [24] 1879 	inc	dptr
      0007AC E0               [24] 1880 	movx	a,@dptr
      0007AD FD               [12] 1881 	mov	r5,a
      0007AE C0 05            [24] 1882 	push	ar5
      0007B0 C0 04            [24] 1883 	push	ar4
      0007B2 C0 04            [24] 1884 	push	ar4
      0007B4 C0 05            [24] 1885 	push	ar5
      0007B6 74r5B            [12] 1886 	mov	a,#___str_33
      0007B8 C0 E0            [24] 1887 	push	acc
      0007BA 74s03            [12] 1888 	mov	a,#(___str_33 >> 8)
      0007BC C0 E0            [24] 1889 	push	acc
      0007BE 12r00r00         [24] 1890 	lcall	_printf_tiny
      0007C1 E5 81            [12] 1891 	mov	a,sp
      0007C3 24 FC            [12] 1892 	add	a,#0xfc
      0007C5 F5 81            [12] 1893 	mov	sp,a
                                   1894 ;	main.c:271: buffer_1 = 0;
      0007C7 90r12rC2         [24] 1895 	mov	dptr,#_buffer_1
      0007CA E4               [12] 1896 	clr	a
      0007CB F0               [24] 1897 	movx	@dptr,a
      0007CC A3               [24] 1898 	inc	dptr
      0007CD F0               [24] 1899 	movx	@dptr,a
                                   1900 ;	main.c:272: printf_tiny("Buffer 1 deleted\r\n");
      0007CE 74r6B            [12] 1901 	mov	a,#___str_34
      0007D0 C0 E0            [24] 1902 	push	acc
      0007D2 74s03            [12] 1903 	mov	a,#(___str_34 >> 8)
      0007D4 C0 E0            [24] 1904 	push	acc
      0007D6 12r00r00         [24] 1905 	lcall	_printf_tiny
      0007D9 15 81            [12] 1906 	dec	sp
      0007DB 15 81            [12] 1907 	dec	sp
      0007DD D0 04            [24] 1908 	pop	ar4
      0007DF D0 05            [24] 1909 	pop	ar5
      0007E1 D0 05            [24] 1910 	pop	ar5
      0007E3 D0 04            [24] 1911 	pop	ar4
      0007E5 02r04r58         [24] 1912 	ljmp	00173$
      0007E8                       1913 00113$:
                                   1914 ;	main.c:274: else if(((num_del>1))&&(num_del<=(j+2)))
      0007E8 8A 00            [24] 1915 	mov	ar0,r2
      0007EA 8B 01            [24] 1916 	mov	ar1,r3
      0007EC C3               [12] 1917 	clr	c
      0007ED 74 01            [12] 1918 	mov	a,#0x01
      0007EF 98               [12] 1919 	subb	a,r0
      0007F0 E4               [12] 1920 	clr	a
      0007F1 99               [12] 1921 	subb	a,r1
      0007F2 40 03            [24] 1922 	jc	00369$
      0007F4 02r08rD7         [24] 1923 	ljmp	00109$
      0007F7                       1924 00369$:
      0007F7 C0 04            [24] 1925 	push	ar4
      0007F9 C0 05            [24] 1926 	push	ar5
      0007FB 74 02            [12] 1927 	mov	a,#0x02
      0007FD 25*08            [12] 1928 	add	a,_main_sloc4_1_0
      0007FF F8               [12] 1929 	mov	r0,a
      000800 E4               [12] 1930 	clr	a
      000801 35*09            [12] 1931 	addc	a,(_main_sloc4_1_0 + 1)
      000803 F9               [12] 1932 	mov	r1,a
      000804 8A 04            [24] 1933 	mov	ar4,r2
      000806 8B 05            [24] 1934 	mov	ar5,r3
      000808 C3               [12] 1935 	clr	c
      000809 E8               [12] 1936 	mov	a,r0
      00080A 9C               [12] 1937 	subb	a,r4
      00080B E9               [12] 1938 	mov	a,r1
      00080C 9D               [12] 1939 	subb	a,r5
      00080D D0 05            [24] 1940 	pop	ar5
      00080F D0 04            [24] 1941 	pop	ar4
      000811 50 03            [24] 1942 	jnc	00370$
      000813 02r08rD7         [24] 1943 	ljmp	00109$
      000816                       1944 00370$:
                                   1945 ;	main.c:276: printf_tiny("\n\rDeleting buffer_%d.........\n\r",num_del);
      000816 C0 04            [24] 1946 	push	ar4
      000818 C0 05            [24] 1947 	push	ar5
      00081A C0 05            [24] 1948 	push	ar5
      00081C C0 04            [24] 1949 	push	ar4
      00081E C0 03            [24] 1950 	push	ar3
      000820 C0 02            [24] 1951 	push	ar2
      000822 C0 02            [24] 1952 	push	ar2
      000824 C0 03            [24] 1953 	push	ar3
      000826 74r7E            [12] 1954 	mov	a,#___str_35
      000828 C0 E0            [24] 1955 	push	acc
      00082A 74s03            [12] 1956 	mov	a,#(___str_35 >> 8)
      00082C C0 E0            [24] 1957 	push	acc
      00082E 12r00r00         [24] 1958 	lcall	_printf_tiny
      000831 E5 81            [12] 1959 	mov	a,sp
      000833 24 FC            [12] 1960 	add	a,#0xfc
      000835 F5 81            [12] 1961 	mov	sp,a
      000837 D0 02            [24] 1962 	pop	ar2
      000839 D0 03            [24] 1963 	pop	ar3
      00083B D0 04            [24] 1964 	pop	ar4
      00083D D0 05            [24] 1965 	pop	ar5
                                   1966 ;	main.c:277: free(buffer_n[num_del-2]);
      00083F 8A 00            [24] 1967 	mov	ar0,r2
      000841 18               [12] 1968 	dec	r0
      000842 18               [12] 1969 	dec	r0
      000843 C2 D5            [12] 1970 	clr	F0
      000845 75 F0 02         [24] 1971 	mov	b,#0x02
      000848 E8               [12] 1972 	mov	a,r0
      000849 30 E7 04         [24] 1973 	jnb	acc.7,00371$
      00084C B2 D5            [12] 1974 	cpl	F0
      00084E F4               [12] 1975 	cpl	a
      00084F 04               [12] 1976 	inc	a
      000850                       1977 00371$:
      000850 A4               [48] 1978 	mul	ab
      000851 30 D5 0A         [24] 1979 	jnb	F0,00372$
      000854 F4               [12] 1980 	cpl	a
      000855 24 01            [12] 1981 	add	a,#0x01
      000857 C5 F0            [12] 1982 	xch	a,b
      000859 F4               [12] 1983 	cpl	a
      00085A 34 00            [12] 1984 	addc	a,#0x00
      00085C C5 F0            [12] 1985 	xch	a,b
      00085E                       1986 00372$:
      00085E 24rC4            [12] 1987 	add	a,#_buffer_n
      000860 F5 82            [12] 1988 	mov	dpl,a
      000862 74s12            [12] 1989 	mov	a,#(_buffer_n >> 8)
      000864 35 F0            [12] 1990 	addc	a,b
      000866 F5 83            [12] 1991 	mov	dph,a
      000868 E0               [24] 1992 	movx	a,@dptr
      000869 F8               [12] 1993 	mov	r0,a
      00086A A3               [24] 1994 	inc	dptr
      00086B E0               [24] 1995 	movx	a,@dptr
      00086C F9               [12] 1996 	mov	r1,a
      00086D 7D 00            [12] 1997 	mov	r5,#0x00
      00086F 88 82            [24] 1998 	mov	dpl,r0
      000871 89 83            [24] 1999 	mov	dph,r1
      000873 8D F0            [24] 2000 	mov	b,r5
      000875 C0 05            [24] 2001 	push	ar5
      000877 C0 04            [24] 2002 	push	ar4
      000879 C0 03            [24] 2003 	push	ar3
      00087B C0 02            [24] 2004 	push	ar2
      00087D 12r00r00         [24] 2005 	lcall	_free
      000880 D0 02            [24] 2006 	pop	ar2
      000882 D0 03            [24] 2007 	pop	ar3
                                   2008 ;	main.c:278: printf_tiny("\n\rBuffer %d  is free\n\r",num_del);
      000884 C0 03            [24] 2009 	push	ar3
      000886 C0 02            [24] 2010 	push	ar2
      000888 C0 02            [24] 2011 	push	ar2
      00088A C0 03            [24] 2012 	push	ar3
      00088C 74r9E            [12] 2013 	mov	a,#___str_36
      00088E C0 E0            [24] 2014 	push	acc
      000890 74s03            [12] 2015 	mov	a,#(___str_36 >> 8)
      000892 C0 E0            [24] 2016 	push	acc
      000894 12r00r00         [24] 2017 	lcall	_printf_tiny
      000897 E5 81            [12] 2018 	mov	a,sp
      000899 24 FC            [12] 2019 	add	a,#0xfc
      00089B F5 81            [12] 2020 	mov	sp,a
      00089D D0 02            [24] 2021 	pop	ar2
      00089F D0 03            [24] 2022 	pop	ar3
      0008A1 D0 04            [24] 2023 	pop	ar4
      0008A3 D0 05            [24] 2024 	pop	ar5
                                   2025 ;	main.c:279: buffer_n[num_del-2]=0;
      0008A5 1A               [12] 2026 	dec	r2
      0008A6 1A               [12] 2027 	dec	r2
      0008A7 C2 D5            [12] 2028 	clr	F0
      0008A9 75 F0 02         [24] 2029 	mov	b,#0x02
      0008AC EA               [12] 2030 	mov	a,r2
      0008AD 30 E7 04         [24] 2031 	jnb	acc.7,00373$
      0008B0 B2 D5            [12] 2032 	cpl	F0
      0008B2 F4               [12] 2033 	cpl	a
      0008B3 04               [12] 2034 	inc	a
      0008B4                       2035 00373$:
      0008B4 A4               [48] 2036 	mul	ab
      0008B5 30 D5 0A         [24] 2037 	jnb	F0,00374$
      0008B8 F4               [12] 2038 	cpl	a
      0008B9 24 01            [12] 2039 	add	a,#0x01
      0008BB C5 F0            [12] 2040 	xch	a,b
      0008BD F4               [12] 2041 	cpl	a
      0008BE 34 00            [12] 2042 	addc	a,#0x00
      0008C0 C5 F0            [12] 2043 	xch	a,b
      0008C2                       2044 00374$:
      0008C2 24rC4            [12] 2045 	add	a,#_buffer_n
      0008C4 F5 82            [12] 2046 	mov	dpl,a
      0008C6 74s12            [12] 2047 	mov	a,#(_buffer_n >> 8)
      0008C8 35 F0            [12] 2048 	addc	a,b
      0008CA F5 83            [12] 2049 	mov	dph,a
      0008CC E4               [12] 2050 	clr	a
      0008CD F0               [24] 2051 	movx	@dptr,a
      0008CE A3               [24] 2052 	inc	dptr
      0008CF F0               [24] 2053 	movx	@dptr,a
      0008D0 D0 05            [24] 2054 	pop	ar5
      0008D2 D0 04            [24] 2055 	pop	ar4
      0008D4 02r04r58         [24] 2056 	ljmp	00173$
      0008D7                       2057 00109$:
                                   2058 ;	main.c:284: printf_tiny("\n\rEnter a valid buffer number\n\rPress '-' to delete any valid buffer\n\r");
      0008D7 C0 05            [24] 2059 	push	ar5
      0008D9 C0 04            [24] 2060 	push	ar4
      0008DB 74rB5            [12] 2061 	mov	a,#___str_37
      0008DD C0 E0            [24] 2062 	push	acc
      0008DF 74s03            [12] 2063 	mov	a,#(___str_37 >> 8)
      0008E1 C0 E0            [24] 2064 	push	acc
      0008E3 12r00r00         [24] 2065 	lcall	_printf_tiny
      0008E6 15 81            [12] 2066 	dec	sp
      0008E8 15 81            [12] 2067 	dec	sp
      0008EA D0 04            [24] 2068 	pop	ar4
      0008EC D0 05            [24] 2069 	pop	ar5
      0008EE 02r04r58         [24] 2070 	ljmp	00173$
      0008F1                       2071 00154$:
                                   2072 ;	main.c:288: else if (input_char == '?')
      0008F1 74 3F            [12] 2073 	mov	a,#0x3f
      0008F3 B5*00 06         [24] 2074 	cjne	a,_main_sloc0_1_0,00375$
      0008F6 E4               [12] 2075 	clr	a
      0008F7 B5*01 02         [24] 2076 	cjne	a,(_main_sloc0_1_0 + 1),00375$
      0008FA 80 03            [24] 2077 	sjmp	00376$
      0008FC                       2078 00375$:
      0008FC 02r0Cr8B         [24] 2079 	ljmp	00151$
      0008FF                       2080 00376$:
                                   2081 ;	main.c:290: printf_tiny(" HEAP REPORT of buffer_0 \r\n");
      0008FF C0 05            [24] 2082 	push	ar5
      000901 C0 04            [24] 2083 	push	ar4
      000903 74rFB            [12] 2084 	mov	a,#___str_38
      000905 C0 E0            [24] 2085 	push	acc
      000907 74s03            [12] 2086 	mov	a,#(___str_38 >> 8)
      000909 C0 E0            [24] 2087 	push	acc
      00090B 12r00r00         [24] 2088 	lcall	_printf_tiny
      00090E 15 81            [12] 2089 	dec	sp
      000910 15 81            [12] 2090 	dec	sp
                                   2091 ;	main.c:291: printf_tiny("\n\rStart Addressof buffer_0x%x\n\r",buffer_0_add);
      000912 90r13r28         [24] 2092 	mov	dptr,#_buffer_0_add
      000915 E0               [24] 2093 	movx	a,@dptr
      000916 C0 E0            [24] 2094 	push	acc
      000918 A3               [24] 2095 	inc	dptr
      000919 E0               [24] 2096 	movx	a,@dptr
      00091A C0 E0            [24] 2097 	push	acc
      00091C 74r17            [12] 2098 	mov	a,#___str_39
      00091E C0 E0            [24] 2099 	push	acc
      000920 74s04            [12] 2100 	mov	a,#(___str_39 >> 8)
      000922 C0 E0            [24] 2101 	push	acc
      000924 12r00r00         [24] 2102 	lcall	_printf_tiny
      000927 E5 81            [12] 2103 	mov	a,sp
      000929 24 FC            [12] 2104 	add	a,#0xfc
      00092B F5 81            [12] 2105 	mov	sp,a
                                   2106 ;	main.c:292: printf_tiny("\n\rEnding Address of buffer_0x%x\n\r",(buffer_0_add)+(num));
      00092D 90r13r28         [24] 2107 	mov	dptr,#_buffer_0_add
      000930 E0               [24] 2108 	movx	a,@dptr
      000931 FA               [12] 2109 	mov	r2,a
      000932 A3               [24] 2110 	inc	dptr
      000933 E0               [24] 2111 	movx	a,@dptr
      000934 FB               [12] 2112 	mov	r3,a
      000935 E5*0A            [12] 2113 	mov	a,_main_sloc5_1_0
      000937 2A               [12] 2114 	add	a,r2
      000938 FA               [12] 2115 	mov	r2,a
      000939 E5*0B            [12] 2116 	mov	a,(_main_sloc5_1_0 + 1)
      00093B 3B               [12] 2117 	addc	a,r3
      00093C FB               [12] 2118 	mov	r3,a
      00093D C0 02            [24] 2119 	push	ar2
      00093F C0 03            [24] 2120 	push	ar3
      000941 74r37            [12] 2121 	mov	a,#___str_40
      000943 C0 E0            [24] 2122 	push	acc
      000945 74s04            [12] 2123 	mov	a,#(___str_40 >> 8)
      000947 C0 E0            [24] 2124 	push	acc
      000949 12r00r00         [24] 2125 	lcall	_printf_tiny
      00094C E5 81            [12] 2126 	mov	a,sp
      00094E 24 FC            [12] 2127 	add	a,#0xfc
      000950 F5 81            [12] 2128 	mov	sp,a
                                   2129 ;	main.c:293: printf_tiny("\n\rBuffer Size of buffer_0 %d\n\r",num);
      000952 C0*0A            [24] 2130 	push	_main_sloc5_1_0
      000954 C0*0B            [24] 2131 	push	(_main_sloc5_1_0 + 1)
      000956 74r59            [12] 2132 	mov	a,#___str_41
      000958 C0 E0            [24] 2133 	push	acc
      00095A 74s04            [12] 2134 	mov	a,#(___str_41 >> 8)
      00095C C0 E0            [24] 2135 	push	acc
      00095E 12r00r00         [24] 2136 	lcall	_printf_tiny
      000961 E5 81            [12] 2137 	mov	a,sp
      000963 24 FC            [12] 2138 	add	a,#0xfc
      000965 F5 81            [12] 2139 	mov	sp,a
                                   2140 ;	main.c:294: printf_tiny("\n\rStored characters in buffer>>>%d\n\r",storage);
      000967 90r00r00         [24] 2141 	mov	dptr,#_storage
      00096A E0               [24] 2142 	movx	a,@dptr
      00096B C0 E0            [24] 2143 	push	acc
      00096D A3               [24] 2144 	inc	dptr
      00096E E0               [24] 2145 	movx	a,@dptr
      00096F C0 E0            [24] 2146 	push	acc
      000971 74r78            [12] 2147 	mov	a,#___str_42
      000973 C0 E0            [24] 2148 	push	acc
      000975 74s04            [12] 2149 	mov	a,#(___str_42 >> 8)
      000977 C0 E0            [24] 2150 	push	acc
      000979 12r00r00         [24] 2151 	lcall	_printf_tiny
      00097C E5 81            [12] 2152 	mov	a,sp
      00097E 24 FC            [12] 2153 	add	a,#0xfc
      000980 F5 81            [12] 2154 	mov	sp,a
                                   2155 ;	main.c:295: printf_tiny("\n\rFree Spaces in buffer%d\n\r",(num-storage));
      000982 90r00r00         [24] 2156 	mov	dptr,#_storage
      000985 E0               [24] 2157 	movx	a,@dptr
      000986 FA               [12] 2158 	mov	r2,a
      000987 A3               [24] 2159 	inc	dptr
      000988 E0               [24] 2160 	movx	a,@dptr
      000989 FB               [12] 2161 	mov	r3,a
      00098A E5*0A            [12] 2162 	mov	a,_main_sloc5_1_0
      00098C C3               [12] 2163 	clr	c
      00098D 9A               [12] 2164 	subb	a,r2
      00098E FA               [12] 2165 	mov	r2,a
      00098F E5*0B            [12] 2166 	mov	a,(_main_sloc5_1_0 + 1)
      000991 9B               [12] 2167 	subb	a,r3
      000992 FB               [12] 2168 	mov	r3,a
      000993 C0 02            [24] 2169 	push	ar2
      000995 C0 03            [24] 2170 	push	ar3
      000997 74r9D            [12] 2171 	mov	a,#___str_43
      000999 C0 E0            [24] 2172 	push	acc
      00099B 74s04            [12] 2173 	mov	a,#(___str_43 >> 8)
      00099D C0 E0            [24] 2174 	push	acc
      00099F 12r00r00         [24] 2175 	lcall	_printf_tiny
      0009A2 E5 81            [12] 2176 	mov	a,sp
      0009A4 24 FC            [12] 2177 	add	a,#0xfc
      0009A6 F5 81            [12] 2178 	mov	sp,a
      0009A8 D0 04            [24] 2179 	pop	ar4
      0009AA D0 05            [24] 2180 	pop	ar5
                                   2181 ;	main.c:298: if(buffer_1 != 0)
      0009AC 90r12rC2         [24] 2182 	mov	dptr,#_buffer_1
      0009AF E0               [24] 2183 	movx	a,@dptr
      0009B0 F5 F0            [12] 2184 	mov	b,a
      0009B2 A3               [24] 2185 	inc	dptr
      0009B3 E0               [24] 2186 	movx	a,@dptr
      0009B4 45 F0            [12] 2187 	orl	a,b
      0009B6 70 03            [24] 2188 	jnz	00377$
      0009B8 02r0Ar4B         [24] 2189 	ljmp	00211$
      0009BB                       2190 00377$:
                                   2191 ;	main.c:300: printf_tiny("\n\rHeap status of buffer_1\n\r");
      0009BB C0 05            [24] 2192 	push	ar5
      0009BD C0 04            [24] 2193 	push	ar4
      0009BF 74rB9            [12] 2194 	mov	a,#___str_44
      0009C1 C0 E0            [24] 2195 	push	acc
      0009C3 74s04            [12] 2196 	mov	a,#(___str_44 >> 8)
      0009C5 C0 E0            [24] 2197 	push	acc
      0009C7 12r00r00         [24] 2198 	lcall	_printf_tiny
      0009CA 15 81            [12] 2199 	dec	sp
      0009CC 15 81            [12] 2200 	dec	sp
                                   2201 ;	main.c:301: printf_tiny("\n\rStart Address of buffer_1 x%x\n\r",buffer_1_add);
      0009CE 90r13r2A         [24] 2202 	mov	dptr,#_buffer_1_add
      0009D1 E0               [24] 2203 	movx	a,@dptr
      0009D2 C0 E0            [24] 2204 	push	acc
      0009D4 A3               [24] 2205 	inc	dptr
      0009D5 E0               [24] 2206 	movx	a,@dptr
      0009D6 C0 E0            [24] 2207 	push	acc
      0009D8 74rD5            [12] 2208 	mov	a,#___str_45
      0009DA C0 E0            [24] 2209 	push	acc
      0009DC 74s04            [12] 2210 	mov	a,#(___str_45 >> 8)
      0009DE C0 E0            [24] 2211 	push	acc
      0009E0 12r00r00         [24] 2212 	lcall	_printf_tiny
      0009E3 E5 81            [12] 2213 	mov	a,sp
      0009E5 24 FC            [12] 2214 	add	a,#0xfc
      0009E7 F5 81            [12] 2215 	mov	sp,a
                                   2216 ;	main.c:302: printf_tiny("\n\rEnding Address of buffer_1x%x\n\r",buffer_1_add+num);
      0009E9 90r13r2A         [24] 2217 	mov	dptr,#_buffer_1_add
      0009EC E0               [24] 2218 	movx	a,@dptr
      0009ED FA               [12] 2219 	mov	r2,a
      0009EE A3               [24] 2220 	inc	dptr
      0009EF E0               [24] 2221 	movx	a,@dptr
      0009F0 FB               [12] 2222 	mov	r3,a
      0009F1 E5*0A            [12] 2223 	mov	a,_main_sloc5_1_0
      0009F3 2A               [12] 2224 	add	a,r2
      0009F4 FA               [12] 2225 	mov	r2,a
      0009F5 E5*0B            [12] 2226 	mov	a,(_main_sloc5_1_0 + 1)
      0009F7 3B               [12] 2227 	addc	a,r3
      0009F8 FB               [12] 2228 	mov	r3,a
      0009F9 C0 02            [24] 2229 	push	ar2
      0009FB C0 03            [24] 2230 	push	ar3
      0009FD 74rF7            [12] 2231 	mov	a,#___str_46
      0009FF C0 E0            [24] 2232 	push	acc
      000A01 74s04            [12] 2233 	mov	a,#(___str_46 >> 8)
      000A03 C0 E0            [24] 2234 	push	acc
      000A05 12r00r00         [24] 2235 	lcall	_printf_tiny
      000A08 E5 81            [12] 2236 	mov	a,sp
      000A0A 24 FC            [12] 2237 	add	a,#0xfc
      000A0C F5 81            [12] 2238 	mov	sp,a
                                   2239 ;	main.c:303: printf_tiny("\n\rBuffer Size%d\n\r",num);
      000A0E C0*0A            [24] 2240 	push	_main_sloc5_1_0
      000A10 C0*0B            [24] 2241 	push	(_main_sloc5_1_0 + 1)
      000A12 74r19            [12] 2242 	mov	a,#___str_47
      000A14 C0 E0            [24] 2243 	push	acc
      000A16 74s05            [12] 2244 	mov	a,#(___str_47 >> 8)
      000A18 C0 E0            [24] 2245 	push	acc
      000A1A 12r00r00         [24] 2246 	lcall	_printf_tiny
      000A1D E5 81            [12] 2247 	mov	a,sp
      000A1F 24 FC            [12] 2248 	add	a,#0xfc
      000A21 F5 81            [12] 2249 	mov	sp,a
                                   2250 ;	main.c:304: printf_tiny("\n\rStorage characters in buffer>>>0\n\r");
      000A23 74r2B            [12] 2251 	mov	a,#___str_48
      000A25 C0 E0            [24] 2252 	push	acc
      000A27 74s05            [12] 2253 	mov	a,#(___str_48 >> 8)
      000A29 C0 E0            [24] 2254 	push	acc
      000A2B 12r00r00         [24] 2255 	lcall	_printf_tiny
      000A2E 15 81            [12] 2256 	dec	sp
      000A30 15 81            [12] 2257 	dec	sp
                                   2258 ;	main.c:305: printf_tiny("\n\rFree Spaces in buffer>>>>>>>>>>%d\n\r",(num));
      000A32 C0*0A            [24] 2259 	push	_main_sloc5_1_0
      000A34 C0*0B            [24] 2260 	push	(_main_sloc5_1_0 + 1)
      000A36 74r50            [12] 2261 	mov	a,#___str_49
      000A38 C0 E0            [24] 2262 	push	acc
      000A3A 74s05            [12] 2263 	mov	a,#(___str_49 >> 8)
      000A3C C0 E0            [24] 2264 	push	acc
      000A3E 12r00r00         [24] 2265 	lcall	_printf_tiny
      000A41 E5 81            [12] 2266 	mov	a,sp
      000A43 24 FC            [12] 2267 	add	a,#0xfc
      000A45 F5 81            [12] 2268 	mov	sp,a
      000A47 D0 04            [24] 2269 	pop	ar4
      000A49 D0 05            [24] 2270 	pop	ar5
                                   2271 ;	main.c:309: for(int m=2;m<=(j+2);m++)
      000A4B                       2272 00211$:
      000A4B 74 02            [12] 2273 	mov	a,#0x02
      000A4D 25*08            [12] 2274 	add	a,_main_sloc4_1_0
      000A4F FA               [12] 2275 	mov	r2,a
      000A50 E4               [12] 2276 	clr	a
      000A51 35*09            [12] 2277 	addc	a,(_main_sloc4_1_0 + 1)
      000A53 FB               [12] 2278 	mov	r3,a
      000A54 78 02            [12] 2279 	mov	r0,#0x02
      000A56 79 00            [12] 2280 	mov	r1,#0x00
      000A58                       2281 00176$:
      000A58 C3               [12] 2282 	clr	c
      000A59 EA               [12] 2283 	mov	a,r2
      000A5A 98               [12] 2284 	subb	a,r0
      000A5B EB               [12] 2285 	mov	a,r3
      000A5C 64 80            [12] 2286 	xrl	a,#0x80
      000A5E 89 F0            [24] 2287 	mov	b,r1
      000A60 63 F0 80         [24] 2288 	xrl	b,#0x80
      000A63 95 F0            [12] 2289 	subb	a,b
      000A65 50 03            [24] 2290 	jnc	00378$
      000A67 02r0Cr26         [24] 2291 	ljmp	00122$
      000A6A                       2292 00378$:
                                   2293 ;	main.c:311: if(buffer_n[m-2]!=0)
      000A6A C0 04            [24] 2294 	push	ar4
      000A6C C0 05            [24] 2295 	push	ar5
      000A6E E8               [12] 2296 	mov	a,r0
      000A6F F5*04            [12] 2297 	mov	_main_sloc2_1_0,a
      000A71 24 FE            [12] 2298 	add	a,#0xfe
      000A73 FD               [12] 2299 	mov	r5,a
      000A74 C2 D5            [12] 2300 	clr	F0
      000A76 75 F0 02         [24] 2301 	mov	b,#0x02
      000A79 ED               [12] 2302 	mov	a,r5
      000A7A 30 E7 04         [24] 2303 	jnb	acc.7,00379$
      000A7D B2 D5            [12] 2304 	cpl	F0
      000A7F F4               [12] 2305 	cpl	a
      000A80 04               [12] 2306 	inc	a
      000A81                       2307 00379$:
      000A81 A4               [48] 2308 	mul	ab
      000A82 30 D5 0A         [24] 2309 	jnb	F0,00380$
      000A85 F4               [12] 2310 	cpl	a
      000A86 24 01            [12] 2311 	add	a,#0x01
      000A88 C5 F0            [12] 2312 	xch	a,b
      000A8A F4               [12] 2313 	cpl	a
      000A8B 34 00            [12] 2314 	addc	a,#0x00
      000A8D C5 F0            [12] 2315 	xch	a,b
      000A8F                       2316 00380$:
      000A8F 24rC4            [12] 2317 	add	a,#_buffer_n
      000A91 F5 82            [12] 2318 	mov	dpl,a
      000A93 74s12            [12] 2319 	mov	a,#(_buffer_n >> 8)
      000A95 35 F0            [12] 2320 	addc	a,b
      000A97 F5 83            [12] 2321 	mov	dph,a
      000A99 E0               [24] 2322 	movx	a,@dptr
      000A9A FC               [12] 2323 	mov	r4,a
      000A9B A3               [24] 2324 	inc	dptr
      000A9C E0               [24] 2325 	movx	a,@dptr
      000A9D 4C               [12] 2326 	orl	a,r4
      000A9E D0 05            [24] 2327 	pop	ar5
      000AA0 D0 04            [24] 2328 	pop	ar4
      000AA2 70 03            [24] 2329 	jnz	00381$
      000AA4 02r0Cr1E         [24] 2330 	ljmp	00177$
      000AA7                       2331 00381$:
                                   2332 ;	main.c:313: printf_tiny("\n\rBUFFER %d\n\r",m);
      000AA7 C0 04            [24] 2333 	push	ar4
      000AA9 C0 05            [24] 2334 	push	ar5
      000AAB C0 05            [24] 2335 	push	ar5
      000AAD C0 04            [24] 2336 	push	ar4
      000AAF C0 03            [24] 2337 	push	ar3
      000AB1 C0 02            [24] 2338 	push	ar2
      000AB3 C0 01            [24] 2339 	push	ar1
      000AB5 C0 00            [24] 2340 	push	ar0
      000AB7 C0 00            [24] 2341 	push	ar0
      000AB9 C0 01            [24] 2342 	push	ar1
      000ABB 74r76            [12] 2343 	mov	a,#___str_50
      000ABD C0 E0            [24] 2344 	push	acc
      000ABF 74s05            [12] 2345 	mov	a,#(___str_50 >> 8)
      000AC1 C0 E0            [24] 2346 	push	acc
      000AC3 12r00r00         [24] 2347 	lcall	_printf_tiny
      000AC6 E5 81            [12] 2348 	mov	a,sp
      000AC8 24 FC            [12] 2349 	add	a,#0xfc
      000ACA F5 81            [12] 2350 	mov	sp,a
      000ACC D0 00            [24] 2351 	pop	ar0
      000ACE D0 01            [24] 2352 	pop	ar1
      000AD0 D0 02            [24] 2353 	pop	ar2
      000AD2 D0 03            [24] 2354 	pop	ar3
      000AD4 D0 04            [24] 2355 	pop	ar4
      000AD6 D0 05            [24] 2356 	pop	ar5
                                   2357 ;	main.c:314: printf_tiny("\n\rStart Address0x%x\n\r",(unsigned int)buffer_n[m-2]);
      000AD8 E5*04            [12] 2358 	mov	a,_main_sloc2_1_0
      000ADA 24 FE            [12] 2359 	add	a,#0xfe
      000ADC FD               [12] 2360 	mov	r5,a
      000ADD C2 D5            [12] 2361 	clr	F0
      000ADF 75 F0 02         [24] 2362 	mov	b,#0x02
      000AE2 ED               [12] 2363 	mov	a,r5
      000AE3 30 E7 04         [24] 2364 	jnb	acc.7,00382$
      000AE6 B2 D5            [12] 2365 	cpl	F0
      000AE8 F4               [12] 2366 	cpl	a
      000AE9 04               [12] 2367 	inc	a
      000AEA                       2368 00382$:
      000AEA A4               [48] 2369 	mul	ab
      000AEB 30 D5 0A         [24] 2370 	jnb	F0,00383$
      000AEE F4               [12] 2371 	cpl	a
      000AEF 24 01            [12] 2372 	add	a,#0x01
      000AF1 C5 F0            [12] 2373 	xch	a,b
      000AF3 F4               [12] 2374 	cpl	a
      000AF4 34 00            [12] 2375 	addc	a,#0x00
      000AF6 C5 F0            [12] 2376 	xch	a,b
      000AF8                       2377 00383$:
      000AF8 24rC4            [12] 2378 	add	a,#_buffer_n
      000AFA FC               [12] 2379 	mov	r4,a
      000AFB 74s12            [12] 2380 	mov	a,#(_buffer_n >> 8)
      000AFD 35 F0            [12] 2381 	addc	a,b
      000AFF FD               [12] 2382 	mov	r5,a
      000B00 8C 82            [24] 2383 	mov	dpl,r4
      000B02 8D 83            [24] 2384 	mov	dph,r5
      000B04 E0               [24] 2385 	movx	a,@dptr
      000B05 FE               [12] 2386 	mov	r6,a
      000B06 A3               [24] 2387 	inc	dptr
      000B07 E0               [24] 2388 	movx	a,@dptr
      000B08 FF               [12] 2389 	mov	r7,a
      000B09 C0 05            [24] 2390 	push	ar5
      000B0B C0 04            [24] 2391 	push	ar4
      000B0D C0 03            [24] 2392 	push	ar3
      000B0F C0 02            [24] 2393 	push	ar2
      000B11 C0 01            [24] 2394 	push	ar1
      000B13 C0 00            [24] 2395 	push	ar0
      000B15 C0 06            [24] 2396 	push	ar6
      000B17 C0 07            [24] 2397 	push	ar7
      000B19 74r84            [12] 2398 	mov	a,#___str_51
      000B1B C0 E0            [24] 2399 	push	acc
      000B1D 74s05            [12] 2400 	mov	a,#(___str_51 >> 8)
      000B1F C0 E0            [24] 2401 	push	acc
      000B21 12r00r00         [24] 2402 	lcall	_printf_tiny
      000B24 E5 81            [12] 2403 	mov	a,sp
      000B26 24 FC            [12] 2404 	add	a,#0xfc
      000B28 F5 81            [12] 2405 	mov	sp,a
      000B2A D0 00            [24] 2406 	pop	ar0
      000B2C D0 01            [24] 2407 	pop	ar1
      000B2E D0 02            [24] 2408 	pop	ar2
      000B30 D0 03            [24] 2409 	pop	ar3
      000B32 D0 04            [24] 2410 	pop	ar4
      000B34 D0 05            [24] 2411 	pop	ar5
                                   2412 ;	main.c:315: printf_tiny("\n\rEnding Address0x%x\n\r",(uint16_t)(buffer_n[m-2])+(uint16_t)(buff_size[m]));
      000B36 8C 82            [24] 2413 	mov	dpl,r4
      000B38 8D 83            [24] 2414 	mov	dph,r5
      000B3A E0               [24] 2415 	movx	a,@dptr
      000B3B FC               [12] 2416 	mov	r4,a
      000B3C A3               [24] 2417 	inc	dptr
      000B3D E0               [24] 2418 	movx	a,@dptr
      000B3E FD               [12] 2419 	mov	r5,a
      000B3F 8C*04            [24] 2420 	mov	_main_sloc2_1_0,r4
      000B41 8D*05            [24] 2421 	mov	(_main_sloc2_1_0 + 1),r5
      000B43 E8               [12] 2422 	mov	a,r0
      000B44 28               [12] 2423 	add	a,r0
      000B45 FE               [12] 2424 	mov	r6,a
      000B46 E9               [12] 2425 	mov	a,r1
      000B47 33               [12] 2426 	rlc	a
      000B48 FF               [12] 2427 	mov	r7,a
      000B49 EE               [12] 2428 	mov	a,r6
      000B4A 24r32            [12] 2429 	add	a,#_main_buff_size_65536_61
      000B4C FE               [12] 2430 	mov	r6,a
      000B4D EF               [12] 2431 	mov	a,r7
      000B4E 34s13            [12] 2432 	addc	a,#(_main_buff_size_65536_61 >> 8)
      000B50 FF               [12] 2433 	mov	r7,a
      000B51 8E 82            [24] 2434 	mov	dpl,r6
      000B53 8F 83            [24] 2435 	mov	dph,r7
      000B55 E0               [24] 2436 	movx	a,@dptr
      000B56 FC               [12] 2437 	mov	r4,a
      000B57 A3               [24] 2438 	inc	dptr
      000B58 E0               [24] 2439 	movx	a,@dptr
      000B59 FD               [12] 2440 	mov	r5,a
      000B5A EC               [12] 2441 	mov	a,r4
      000B5B 25*04            [12] 2442 	add	a,_main_sloc2_1_0
      000B5D FC               [12] 2443 	mov	r4,a
      000B5E ED               [12] 2444 	mov	a,r5
      000B5F 35*05            [12] 2445 	addc	a,(_main_sloc2_1_0 + 1)
      000B61 FD               [12] 2446 	mov	r5,a
      000B62 C0 07            [24] 2447 	push	ar7
      000B64 C0 06            [24] 2448 	push	ar6
      000B66 C0 05            [24] 2449 	push	ar5
      000B68 C0 04            [24] 2450 	push	ar4
      000B6A C0 03            [24] 2451 	push	ar3
      000B6C C0 02            [24] 2452 	push	ar2
      000B6E C0 01            [24] 2453 	push	ar1
      000B70 C0 00            [24] 2454 	push	ar0
      000B72 C0 04            [24] 2455 	push	ar4
      000B74 C0 05            [24] 2456 	push	ar5
      000B76 74r9A            [12] 2457 	mov	a,#___str_52
      000B78 C0 E0            [24] 2458 	push	acc
      000B7A 74s05            [12] 2459 	mov	a,#(___str_52 >> 8)
      000B7C C0 E0            [24] 2460 	push	acc
      000B7E 12r00r00         [24] 2461 	lcall	_printf_tiny
      000B81 E5 81            [12] 2462 	mov	a,sp
      000B83 24 FC            [12] 2463 	add	a,#0xfc
      000B85 F5 81            [12] 2464 	mov	sp,a
      000B87 D0 00            [24] 2465 	pop	ar0
      000B89 D0 01            [24] 2466 	pop	ar1
      000B8B D0 02            [24] 2467 	pop	ar2
      000B8D D0 03            [24] 2468 	pop	ar3
      000B8F D0 04            [24] 2469 	pop	ar4
      000B91 D0 05            [24] 2470 	pop	ar5
      000B93 D0 06            [24] 2471 	pop	ar6
      000B95 D0 07            [24] 2472 	pop	ar7
                                   2473 ;	main.c:316: printf_tiny("\n\rBuffer Size%d\n\r",buff_size[m]);
      000B97 8E 82            [24] 2474 	mov	dpl,r6
      000B99 8F 83            [24] 2475 	mov	dph,r7
      000B9B E0               [24] 2476 	movx	a,@dptr
      000B9C FC               [12] 2477 	mov	r4,a
      000B9D A3               [24] 2478 	inc	dptr
      000B9E E0               [24] 2479 	movx	a,@dptr
      000B9F FD               [12] 2480 	mov	r5,a
      000BA0 C0 07            [24] 2481 	push	ar7
      000BA2 C0 06            [24] 2482 	push	ar6
      000BA4 C0 05            [24] 2483 	push	ar5
      000BA6 C0 04            [24] 2484 	push	ar4
      000BA8 C0 03            [24] 2485 	push	ar3
      000BAA C0 02            [24] 2486 	push	ar2
      000BAC C0 01            [24] 2487 	push	ar1
      000BAE C0 00            [24] 2488 	push	ar0
      000BB0 C0 04            [24] 2489 	push	ar4
      000BB2 C0 05            [24] 2490 	push	ar5
      000BB4 74r19            [12] 2491 	mov	a,#___str_47
      000BB6 C0 E0            [24] 2492 	push	acc
      000BB8 74s05            [12] 2493 	mov	a,#(___str_47 >> 8)
      000BBA C0 E0            [24] 2494 	push	acc
      000BBC 12r00r00         [24] 2495 	lcall	_printf_tiny
      000BBF E5 81            [12] 2496 	mov	a,sp
      000BC1 24 FC            [12] 2497 	add	a,#0xfc
      000BC3 F5 81            [12] 2498 	mov	sp,a
                                   2499 ;	main.c:317: printf_tiny("\n\rStorage characters in buffer0\n\r");
      000BC5 74rB1            [12] 2500 	mov	a,#___str_53
      000BC7 C0 E0            [24] 2501 	push	acc
      000BC9 74s05            [12] 2502 	mov	a,#(___str_53 >> 8)
      000BCB C0 E0            [24] 2503 	push	acc
      000BCD 12r00r00         [24] 2504 	lcall	_printf_tiny
      000BD0 15 81            [12] 2505 	dec	sp
      000BD2 15 81            [12] 2506 	dec	sp
      000BD4 D0 00            [24] 2507 	pop	ar0
      000BD6 D0 01            [24] 2508 	pop	ar1
      000BD8 D0 02            [24] 2509 	pop	ar2
      000BDA D0 03            [24] 2510 	pop	ar3
      000BDC D0 04            [24] 2511 	pop	ar4
      000BDE D0 05            [24] 2512 	pop	ar5
      000BE0 D0 06            [24] 2513 	pop	ar6
      000BE2 D0 07            [24] 2514 	pop	ar7
                                   2515 ;	main.c:318: printf_tiny("\n\rFree Spaces in buffer%d\n\r",(buff_size[m]));
      000BE4 8E 82            [24] 2516 	mov	dpl,r6
      000BE6 8F 83            [24] 2517 	mov	dph,r7
      000BE8 E0               [24] 2518 	movx	a,@dptr
      000BE9 FE               [12] 2519 	mov	r6,a
      000BEA A3               [24] 2520 	inc	dptr
      000BEB E0               [24] 2521 	movx	a,@dptr
      000BEC FF               [12] 2522 	mov	r7,a
      000BED C0 05            [24] 2523 	push	ar5
      000BEF C0 04            [24] 2524 	push	ar4
      000BF1 C0 03            [24] 2525 	push	ar3
      000BF3 C0 02            [24] 2526 	push	ar2
      000BF5 C0 01            [24] 2527 	push	ar1
      000BF7 C0 00            [24] 2528 	push	ar0
      000BF9 C0 06            [24] 2529 	push	ar6
      000BFB C0 07            [24] 2530 	push	ar7
      000BFD 74r9D            [12] 2531 	mov	a,#___str_43
      000BFF C0 E0            [24] 2532 	push	acc
      000C01 74s04            [12] 2533 	mov	a,#(___str_43 >> 8)
      000C03 C0 E0            [24] 2534 	push	acc
      000C05 12r00r00         [24] 2535 	lcall	_printf_tiny
      000C08 E5 81            [12] 2536 	mov	a,sp
      000C0A 24 FC            [12] 2537 	add	a,#0xfc
      000C0C F5 81            [12] 2538 	mov	sp,a
      000C0E D0 00            [24] 2539 	pop	ar0
      000C10 D0 01            [24] 2540 	pop	ar1
      000C12 D0 02            [24] 2541 	pop	ar2
      000C14 D0 03            [24] 2542 	pop	ar3
      000C16 D0 04            [24] 2543 	pop	ar4
      000C18 D0 05            [24] 2544 	pop	ar5
                                   2545 ;	main.c:377: for(total_buffer_count=2;(total_buffer_count)<(j+2);(total_buffer_count)++)
      000C1A D0 05            [24] 2546 	pop	ar5
      000C1C D0 04            [24] 2547 	pop	ar4
                                   2548 ;	main.c:318: printf_tiny("\n\rFree Spaces in buffer%d\n\r",(buff_size[m]));
      000C1E                       2549 00177$:
                                   2550 ;	main.c:309: for(int m=2;m<=(j+2);m++)
      000C1E 08               [12] 2551 	inc	r0
      000C1F B8 00 01         [24] 2552 	cjne	r0,#0x00,00384$
      000C22 09               [12] 2553 	inc	r1
      000C23                       2554 00384$:
      000C23 02r0Ar58         [24] 2555 	ljmp	00176$
      000C26                       2556 00122$:
                                   2557 ;	main.c:322: printf_tiny("\n\rNumber of storage characters = %d\n\r",storage);
      000C26 C0 05            [24] 2558 	push	ar5
      000C28 C0 04            [24] 2559 	push	ar4
      000C2A 90r00r00         [24] 2560 	mov	dptr,#_storage
      000C2D E0               [24] 2561 	movx	a,@dptr
      000C2E C0 E0            [24] 2562 	push	acc
      000C30 A3               [24] 2563 	inc	dptr
      000C31 E0               [24] 2564 	movx	a,@dptr
      000C32 C0 E0            [24] 2565 	push	acc
      000C34 74rD3            [12] 2566 	mov	a,#___str_54
      000C36 C0 E0            [24] 2567 	push	acc
      000C38 74s05            [12] 2568 	mov	a,#(___str_54 >> 8)
      000C3A C0 E0            [24] 2569 	push	acc
      000C3C 12r00r00         [24] 2570 	lcall	_printf_tiny
      000C3F E5 81            [12] 2571 	mov	a,sp
      000C41 24 FC            [12] 2572 	add	a,#0xfc
      000C43 F5 81            [12] 2573 	mov	sp,a
                                   2574 ;	main.c:323: printf_tiny("\n\rTotal number of characters received = %d\n\r",total_char);
      000C45 90r00r02         [24] 2575 	mov	dptr,#_total_char
      000C48 E0               [24] 2576 	movx	a,@dptr
      000C49 C0 E0            [24] 2577 	push	acc
      000C4B A3               [24] 2578 	inc	dptr
      000C4C E0               [24] 2579 	movx	a,@dptr
      000C4D C0 E0            [24] 2580 	push	acc
      000C4F 74rF9            [12] 2581 	mov	a,#___str_55
      000C51 C0 E0            [24] 2582 	push	acc
      000C53 74s05            [12] 2583 	mov	a,#(___str_55 >> 8)
      000C55 C0 E0            [24] 2584 	push	acc
      000C57 12r00r00         [24] 2585 	lcall	_printf_tiny
      000C5A E5 81            [12] 2586 	mov	a,sp
      000C5C 24 FC            [12] 2587 	add	a,#0xfc
      000C5E F5 81            [12] 2588 	mov	sp,a
                                   2589 ;	main.c:324: printf_tiny("\n\rTotal number of buffers that were allocated since the start of the program = %d\n\r",(i+2));
      000C60 90r00r04         [24] 2590 	mov	dptr,#_i
      000C63 E0               [24] 2591 	movx	a,@dptr
      000C64 FE               [12] 2592 	mov	r6,a
      000C65 A3               [24] 2593 	inc	dptr
      000C66 E0               [24] 2594 	movx	a,@dptr
      000C67 FF               [12] 2595 	mov	r7,a
      000C68 74 02            [12] 2596 	mov	a,#0x02
      000C6A 2E               [12] 2597 	add	a,r6
      000C6B FE               [12] 2598 	mov	r6,a
      000C6C E4               [12] 2599 	clr	a
      000C6D 3F               [12] 2600 	addc	a,r7
      000C6E FF               [12] 2601 	mov	r7,a
      000C6F C0 06            [24] 2602 	push	ar6
      000C71 C0 07            [24] 2603 	push	ar7
      000C73 74r26            [12] 2604 	mov	a,#___str_56
      000C75 C0 E0            [24] 2605 	push	acc
      000C77 74s06            [12] 2606 	mov	a,#(___str_56 >> 8)
      000C79 C0 E0            [24] 2607 	push	acc
      000C7B 12r00r00         [24] 2608 	lcall	_printf_tiny
      000C7E E5 81            [12] 2609 	mov	a,sp
      000C80 24 FC            [12] 2610 	add	a,#0xfc
      000C82 F5 81            [12] 2611 	mov	sp,a
      000C84 D0 04            [24] 2612 	pop	ar4
      000C86 D0 05            [24] 2613 	pop	ar5
      000C88 02r04r58         [24] 2614 	ljmp	00173$
      000C8B                       2615 00151$:
                                   2616 ;	main.c:327: else if(input_char == '=')
      000C8B 74 3D            [12] 2617 	mov	a,#0x3d
      000C8D B5*00 06         [24] 2618 	cjne	a,_main_sloc0_1_0,00385$
      000C90 E4               [12] 2619 	clr	a
      000C91 B5*01 02         [24] 2620 	cjne	a,(_main_sloc0_1_0 + 1),00385$
      000C94 80 03            [24] 2621 	sjmp	00386$
      000C96                       2622 00385$:
      000C96 02r0Dr9B         [24] 2623 	ljmp	00148$
      000C99                       2624 00386$:
                                   2625 ;	main.c:329: printf_tiny("\n\rContents in Buffer 0\n\r");
      000C99 C0 05            [24] 2626 	push	ar5
      000C9B C0 04            [24] 2627 	push	ar4
      000C9D 74r7A            [12] 2628 	mov	a,#___str_57
      000C9F C0 E0            [24] 2629 	push	acc
      000CA1 74s06            [12] 2630 	mov	a,#(___str_57 >> 8)
      000CA3 C0 E0            [24] 2631 	push	acc
      000CA5 12r00r00         [24] 2632 	lcall	_printf_tiny
      000CA8 15 81            [12] 2633 	dec	sp
      000CAA 15 81            [12] 2634 	dec	sp
      000CAC D0 04            [24] 2635 	pop	ar4
      000CAE D0 05            [24] 2636 	pop	ar5
                                   2637 ;	main.c:331: for((buff_0_count)=0;(buff_0_count)<storage;(buff_0_count)++)
      000CB0 7E 00            [12] 2638 	mov	r6,#0x00
      000CB2 7F 00            [12] 2639 	mov	r7,#0x00
      000CB4                       2640 00179$:
      000CB4 90r00r00         [24] 2641 	mov	dptr,#_storage
      000CB7 E0               [24] 2642 	movx	a,@dptr
      000CB8 FA               [12] 2643 	mov	r2,a
      000CB9 A3               [24] 2644 	inc	dptr
      000CBA E0               [24] 2645 	movx	a,@dptr
      000CBB FB               [12] 2646 	mov	r3,a
      000CBC C3               [12] 2647 	clr	c
      000CBD EE               [12] 2648 	mov	a,r6
      000CBE 9A               [12] 2649 	subb	a,r2
      000CBF EF               [12] 2650 	mov	a,r7
      000CC0 9B               [12] 2651 	subb	a,r3
      000CC1 40 03            [24] 2652 	jc	00387$
      000CC3 02r04r58         [24] 2653 	ljmp	00173$
      000CC6                       2654 00387$:
                                   2655 ;	main.c:333: if(buff_0_count==0)
      000CC6 EE               [12] 2656 	mov	a,r6
      000CC7 4F               [12] 2657 	orl	a,r7
      000CC8 70 42            [24] 2658 	jnz	00129$
                                   2659 ;	main.c:335: printf_tiny("0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000CCA 90r12rC0         [24] 2660 	mov	dptr,#_buffer_0
      000CCD E0               [24] 2661 	movx	a,@dptr
      000CCE FA               [12] 2662 	mov	r2,a
      000CCF A3               [24] 2663 	inc	dptr
      000CD0 E0               [24] 2664 	movx	a,@dptr
      000CD1 FB               [12] 2665 	mov	r3,a
      000CD2 EE               [12] 2666 	mov	a,r6
      000CD3 2A               [12] 2667 	add	a,r2
      000CD4 FA               [12] 2668 	mov	r2,a
      000CD5 EF               [12] 2669 	mov	a,r7
      000CD6 3B               [12] 2670 	addc	a,r3
      000CD7 FB               [12] 2671 	mov	r3,a
      000CD8 8A 82            [24] 2672 	mov	dpl,r2
      000CDA 8B 83            [24] 2673 	mov	dph,r3
      000CDC E0               [24] 2674 	movx	a,@dptr
      000CDD F8               [12] 2675 	mov	r0,a
      000CDE 79 00            [12] 2676 	mov	r1,#0x00
      000CE0 C0 07            [24] 2677 	push	ar7
      000CE2 C0 06            [24] 2678 	push	ar6
      000CE4 C0 05            [24] 2679 	push	ar5
      000CE6 C0 04            [24] 2680 	push	ar4
      000CE8 C0 00            [24] 2681 	push	ar0
      000CEA C0 01            [24] 2682 	push	ar1
      000CEC C0 02            [24] 2683 	push	ar2
      000CEE C0 03            [24] 2684 	push	ar3
      000CF0 74r93            [12] 2685 	mov	a,#___str_58
      000CF2 C0 E0            [24] 2686 	push	acc
      000CF4 74s06            [12] 2687 	mov	a,#(___str_58 >> 8)
      000CF6 C0 E0            [24] 2688 	push	acc
      000CF8 12r00r00         [24] 2689 	lcall	_printf_tiny
      000CFB E5 81            [12] 2690 	mov	a,sp
      000CFD 24 FA            [12] 2691 	add	a,#0xfa
      000CFF F5 81            [12] 2692 	mov	sp,a
      000D01 D0 04            [24] 2693 	pop	ar4
      000D03 D0 05            [24] 2694 	pop	ar5
      000D05 D0 06            [24] 2695 	pop	ar6
      000D07 D0 07            [24] 2696 	pop	ar7
      000D09 02r0Dr93         [24] 2697 	ljmp	00180$
      000D0C                       2698 00129$:
                                   2699 ;	main.c:337: else if((buff_0_count%16)!=0)
      000D0C 74 0F            [12] 2700 	mov	a,#0x0f
      000D0E 5E               [12] 2701 	anl	a,r6
      000D0F FA               [12] 2702 	mov	r2,a
      000D10 7B 00            [12] 2703 	mov	r3,#0x00
      000D12 4B               [12] 2704 	orl	a,r3
      000D13 60 3B            [24] 2705 	jz	00126$
                                   2706 ;	main.c:339: printf_tiny(" %x",*((buffer_0)+(buff_0_count)));
      000D15 90r12rC0         [24] 2707 	mov	dptr,#_buffer_0
      000D18 E0               [24] 2708 	movx	a,@dptr
      000D19 F8               [12] 2709 	mov	r0,a
      000D1A A3               [24] 2710 	inc	dptr
      000D1B E0               [24] 2711 	movx	a,@dptr
      000D1C F9               [12] 2712 	mov	r1,a
      000D1D EE               [12] 2713 	mov	a,r6
      000D1E 28               [12] 2714 	add	a,r0
      000D1F F5 82            [12] 2715 	mov	dpl,a
      000D21 EF               [12] 2716 	mov	a,r7
      000D22 39               [12] 2717 	addc	a,r1
      000D23 F5 83            [12] 2718 	mov	dph,a
      000D25 E0               [24] 2719 	movx	a,@dptr
      000D26 F8               [12] 2720 	mov	r0,a
      000D27 79 00            [12] 2721 	mov	r1,#0x00
      000D29 C0 07            [24] 2722 	push	ar7
      000D2B C0 06            [24] 2723 	push	ar6
      000D2D C0 05            [24] 2724 	push	ar5
      000D2F C0 04            [24] 2725 	push	ar4
      000D31 C0 00            [24] 2726 	push	ar0
      000D33 C0 01            [24] 2727 	push	ar1
      000D35 74r9D            [12] 2728 	mov	a,#___str_59
      000D37 C0 E0            [24] 2729 	push	acc
      000D39 74s06            [12] 2730 	mov	a,#(___str_59 >> 8)
      000D3B C0 E0            [24] 2731 	push	acc
      000D3D 12r00r00         [24] 2732 	lcall	_printf_tiny
      000D40 E5 81            [12] 2733 	mov	a,sp
      000D42 24 FC            [12] 2734 	add	a,#0xfc
      000D44 F5 81            [12] 2735 	mov	sp,a
      000D46 D0 04            [24] 2736 	pop	ar4
      000D48 D0 05            [24] 2737 	pop	ar5
      000D4A D0 06            [24] 2738 	pop	ar6
      000D4C D0 07            [24] 2739 	pop	ar7
      000D4E 80 43            [24] 2740 	sjmp	00180$
      000D50                       2741 00126$:
                                   2742 ;	main.c:341: else if(buff_0_count%16==0)
      000D50 EA               [12] 2743 	mov	a,r2
      000D51 4B               [12] 2744 	orl	a,r3
      000D52 70 3F            [24] 2745 	jnz	00180$
                                   2746 ;	main.c:343: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000D54 90r12rC0         [24] 2747 	mov	dptr,#_buffer_0
      000D57 E0               [24] 2748 	movx	a,@dptr
      000D58 FA               [12] 2749 	mov	r2,a
      000D59 A3               [24] 2750 	inc	dptr
      000D5A E0               [24] 2751 	movx	a,@dptr
      000D5B FB               [12] 2752 	mov	r3,a
      000D5C EE               [12] 2753 	mov	a,r6
      000D5D 2A               [12] 2754 	add	a,r2
      000D5E FA               [12] 2755 	mov	r2,a
      000D5F EF               [12] 2756 	mov	a,r7
      000D60 3B               [12] 2757 	addc	a,r3
      000D61 FB               [12] 2758 	mov	r3,a
      000D62 8A 82            [24] 2759 	mov	dpl,r2
      000D64 8B 83            [24] 2760 	mov	dph,r3
      000D66 E0               [24] 2761 	movx	a,@dptr
      000D67 F8               [12] 2762 	mov	r0,a
      000D68 79 00            [12] 2763 	mov	r1,#0x00
      000D6A C0 07            [24] 2764 	push	ar7
      000D6C C0 06            [24] 2765 	push	ar6
      000D6E C0 05            [24] 2766 	push	ar5
      000D70 C0 04            [24] 2767 	push	ar4
      000D72 C0 00            [24] 2768 	push	ar0
      000D74 C0 01            [24] 2769 	push	ar1
      000D76 C0 02            [24] 2770 	push	ar2
      000D78 C0 03            [24] 2771 	push	ar3
      000D7A 74rA1            [12] 2772 	mov	a,#___str_60
      000D7C C0 E0            [24] 2773 	push	acc
      000D7E 74s06            [12] 2774 	mov	a,#(___str_60 >> 8)
      000D80 C0 E0            [24] 2775 	push	acc
      000D82 12r00r00         [24] 2776 	lcall	_printf_tiny
      000D85 E5 81            [12] 2777 	mov	a,sp
      000D87 24 FA            [12] 2778 	add	a,#0xfa
      000D89 F5 81            [12] 2779 	mov	sp,a
      000D8B D0 04            [24] 2780 	pop	ar4
      000D8D D0 05            [24] 2781 	pop	ar5
      000D8F D0 06            [24] 2782 	pop	ar6
      000D91 D0 07            [24] 2783 	pop	ar7
      000D93                       2784 00180$:
                                   2785 ;	main.c:331: for((buff_0_count)=0;(buff_0_count)<storage;(buff_0_count)++)
      000D93 0E               [12] 2786 	inc	r6
      000D94 BE 00 01         [24] 2787 	cjne	r6,#0x00,00391$
      000D97 0F               [12] 2788 	inc	r7
      000D98                       2789 00391$:
      000D98 02r0CrB4         [24] 2790 	ljmp	00179$
      000D9B                       2791 00148$:
                                   2792 ;	main.c:347: else if(input_char == '&')
      000D9B 74 26            [12] 2793 	mov	a,#0x26
      000D9D B5*00 06         [24] 2794 	cjne	a,_main_sloc0_1_0,00392$
      000DA0 E4               [12] 2795 	clr	a
      000DA1 B5*01 02         [24] 2796 	cjne	a,(_main_sloc0_1_0 + 1),00392$
      000DA4 80 03            [24] 2797 	sjmp	00393$
      000DA6                       2798 00392$:
      000DA6 02r0ErA4         [24] 2799 	ljmp	00145$
      000DA9                       2800 00393$:
                                   2801 ;	main.c:349: printf_tiny("\n\rContents in heap\n\r");
      000DA9 C0 05            [24] 2802 	push	ar5
      000DAB C0 04            [24] 2803 	push	ar4
      000DAD 74rAD            [12] 2804 	mov	a,#___str_61
      000DAF C0 E0            [24] 2805 	push	acc
      000DB1 74s06            [12] 2806 	mov	a,#(___str_61 >> 8)
      000DB3 C0 E0            [24] 2807 	push	acc
      000DB5 12r00r00         [24] 2808 	lcall	_printf_tiny
      000DB8 15 81            [12] 2809 	dec	sp
      000DBA 15 81            [12] 2810 	dec	sp
      000DBC D0 04            [24] 2811 	pop	ar4
      000DBE D0 05            [24] 2812 	pop	ar5
                                   2813 ;	main.c:350: for((buff_0_count)=0;(buff_0_count)<=256;(buff_0_count)++)
      000DC0 7E 00            [12] 2814 	mov	r6,#0x00
      000DC2 7F 00            [12] 2815 	mov	r7,#0x00
      000DC4                       2816 00181$:
                                   2817 ;	main.c:352: if(buff_0_count==0)
      000DC4 EE               [12] 2818 	mov	a,r6
      000DC5 4F               [12] 2819 	orl	a,r7
      000DC6 70 42            [24] 2820 	jnz	00138$
                                   2821 ;	main.c:354: printf_tiny("0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000DC8 90r12rC0         [24] 2822 	mov	dptr,#_buffer_0
      000DCB E0               [24] 2823 	movx	a,@dptr
      000DCC FA               [12] 2824 	mov	r2,a
      000DCD A3               [24] 2825 	inc	dptr
      000DCE E0               [24] 2826 	movx	a,@dptr
      000DCF FB               [12] 2827 	mov	r3,a
      000DD0 EE               [12] 2828 	mov	a,r6
      000DD1 2A               [12] 2829 	add	a,r2
      000DD2 FA               [12] 2830 	mov	r2,a
      000DD3 EF               [12] 2831 	mov	a,r7
      000DD4 3B               [12] 2832 	addc	a,r3
      000DD5 FB               [12] 2833 	mov	r3,a
      000DD6 8A 82            [24] 2834 	mov	dpl,r2
      000DD8 8B 83            [24] 2835 	mov	dph,r3
      000DDA E0               [24] 2836 	movx	a,@dptr
      000DDB F8               [12] 2837 	mov	r0,a
      000DDC 79 00            [12] 2838 	mov	r1,#0x00
      000DDE C0 07            [24] 2839 	push	ar7
      000DE0 C0 06            [24] 2840 	push	ar6
      000DE2 C0 05            [24] 2841 	push	ar5
      000DE4 C0 04            [24] 2842 	push	ar4
      000DE6 C0 00            [24] 2843 	push	ar0
      000DE8 C0 01            [24] 2844 	push	ar1
      000DEA C0 02            [24] 2845 	push	ar2
      000DEC C0 03            [24] 2846 	push	ar3
      000DEE 74r93            [12] 2847 	mov	a,#___str_58
      000DF0 C0 E0            [24] 2848 	push	acc
      000DF2 74s06            [12] 2849 	mov	a,#(___str_58 >> 8)
      000DF4 C0 E0            [24] 2850 	push	acc
      000DF6 12r00r00         [24] 2851 	lcall	_printf_tiny
      000DF9 E5 81            [12] 2852 	mov	a,sp
      000DFB 24 FA            [12] 2853 	add	a,#0xfa
      000DFD F5 81            [12] 2854 	mov	sp,a
      000DFF D0 04            [24] 2855 	pop	ar4
      000E01 D0 05            [24] 2856 	pop	ar5
      000E03 D0 06            [24] 2857 	pop	ar6
      000E05 D0 07            [24] 2858 	pop	ar7
      000E07 02r0Er91         [24] 2859 	ljmp	00182$
      000E0A                       2860 00138$:
                                   2861 ;	main.c:356: else if((buff_0_count%16)!=0)
      000E0A 74 0F            [12] 2862 	mov	a,#0x0f
      000E0C 5E               [12] 2863 	anl	a,r6
      000E0D FA               [12] 2864 	mov	r2,a
      000E0E 7B 00            [12] 2865 	mov	r3,#0x00
      000E10 4B               [12] 2866 	orl	a,r3
      000E11 60 3B            [24] 2867 	jz	00135$
                                   2868 ;	main.c:358: printf_tiny(" %x",*((buffer_0)+(buff_0_count)));
      000E13 90r12rC0         [24] 2869 	mov	dptr,#_buffer_0
      000E16 E0               [24] 2870 	movx	a,@dptr
      000E17 F8               [12] 2871 	mov	r0,a
      000E18 A3               [24] 2872 	inc	dptr
      000E19 E0               [24] 2873 	movx	a,@dptr
      000E1A F9               [12] 2874 	mov	r1,a
      000E1B EE               [12] 2875 	mov	a,r6
      000E1C 28               [12] 2876 	add	a,r0
      000E1D F5 82            [12] 2877 	mov	dpl,a
      000E1F EF               [12] 2878 	mov	a,r7
      000E20 39               [12] 2879 	addc	a,r1
      000E21 F5 83            [12] 2880 	mov	dph,a
      000E23 E0               [24] 2881 	movx	a,@dptr
      000E24 F8               [12] 2882 	mov	r0,a
      000E25 79 00            [12] 2883 	mov	r1,#0x00
      000E27 C0 07            [24] 2884 	push	ar7
      000E29 C0 06            [24] 2885 	push	ar6
      000E2B C0 05            [24] 2886 	push	ar5
      000E2D C0 04            [24] 2887 	push	ar4
      000E2F C0 00            [24] 2888 	push	ar0
      000E31 C0 01            [24] 2889 	push	ar1
      000E33 74r9D            [12] 2890 	mov	a,#___str_59
      000E35 C0 E0            [24] 2891 	push	acc
      000E37 74s06            [12] 2892 	mov	a,#(___str_59 >> 8)
      000E39 C0 E0            [24] 2893 	push	acc
      000E3B 12r00r00         [24] 2894 	lcall	_printf_tiny
      000E3E E5 81            [12] 2895 	mov	a,sp
      000E40 24 FC            [12] 2896 	add	a,#0xfc
      000E42 F5 81            [12] 2897 	mov	sp,a
      000E44 D0 04            [24] 2898 	pop	ar4
      000E46 D0 05            [24] 2899 	pop	ar5
      000E48 D0 06            [24] 2900 	pop	ar6
      000E4A D0 07            [24] 2901 	pop	ar7
      000E4C 80 43            [24] 2902 	sjmp	00182$
      000E4E                       2903 00135$:
                                   2904 ;	main.c:360: else if(buff_0_count%16==0)
      000E4E EA               [12] 2905 	mov	a,r2
      000E4F 4B               [12] 2906 	orl	a,r3
      000E50 70 3F            [24] 2907 	jnz	00182$
                                   2908 ;	main.c:362: printf_tiny("\n\r0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      000E52 90r12rC0         [24] 2909 	mov	dptr,#_buffer_0
      000E55 E0               [24] 2910 	movx	a,@dptr
      000E56 FA               [12] 2911 	mov	r2,a
      000E57 A3               [24] 2912 	inc	dptr
      000E58 E0               [24] 2913 	movx	a,@dptr
      000E59 FB               [12] 2914 	mov	r3,a
      000E5A EE               [12] 2915 	mov	a,r6
      000E5B 2A               [12] 2916 	add	a,r2
      000E5C FA               [12] 2917 	mov	r2,a
      000E5D EF               [12] 2918 	mov	a,r7
      000E5E 3B               [12] 2919 	addc	a,r3
      000E5F FB               [12] 2920 	mov	r3,a
      000E60 8A 82            [24] 2921 	mov	dpl,r2
      000E62 8B 83            [24] 2922 	mov	dph,r3
      000E64 E0               [24] 2923 	movx	a,@dptr
      000E65 F8               [12] 2924 	mov	r0,a
      000E66 79 00            [12] 2925 	mov	r1,#0x00
      000E68 C0 07            [24] 2926 	push	ar7
      000E6A C0 06            [24] 2927 	push	ar6
      000E6C C0 05            [24] 2928 	push	ar5
      000E6E C0 04            [24] 2929 	push	ar4
      000E70 C0 00            [24] 2930 	push	ar0
      000E72 C0 01            [24] 2931 	push	ar1
      000E74 C0 02            [24] 2932 	push	ar2
      000E76 C0 03            [24] 2933 	push	ar3
      000E78 74rA1            [12] 2934 	mov	a,#___str_60
      000E7A C0 E0            [24] 2935 	push	acc
      000E7C 74s06            [12] 2936 	mov	a,#(___str_60 >> 8)
      000E7E C0 E0            [24] 2937 	push	acc
      000E80 12r00r00         [24] 2938 	lcall	_printf_tiny
      000E83 E5 81            [12] 2939 	mov	a,sp
      000E85 24 FA            [12] 2940 	add	a,#0xfa
      000E87 F5 81            [12] 2941 	mov	sp,a
      000E89 D0 04            [24] 2942 	pop	ar4
      000E8B D0 05            [24] 2943 	pop	ar5
      000E8D D0 06            [24] 2944 	pop	ar6
      000E8F D0 07            [24] 2945 	pop	ar7
      000E91                       2946 00182$:
                                   2947 ;	main.c:350: for((buff_0_count)=0;(buff_0_count)<=256;(buff_0_count)++)
      000E91 0E               [12] 2948 	inc	r6
      000E92 BE 00 01         [24] 2949 	cjne	r6,#0x00,00397$
      000E95 0F               [12] 2950 	inc	r7
      000E96                       2951 00397$:
      000E96 C3               [12] 2952 	clr	c
      000E97 E4               [12] 2953 	clr	a
      000E98 9E               [12] 2954 	subb	a,r6
      000E99 74 01            [12] 2955 	mov	a,#0x01
      000E9B 9F               [12] 2956 	subb	a,r7
      000E9C 40 03            [24] 2957 	jc	00398$
      000E9E 02r0DrC4         [24] 2958 	ljmp	00181$
      000EA1                       2959 00398$:
      000EA1 02r04r58         [24] 2960 	ljmp	00173$
      000EA4                       2961 00145$:
                                   2962 ;	main.c:367: else if (input_char == '@')
      000EA4 74 40            [12] 2963 	mov	a,#0x40
      000EA6 B5*00 06         [24] 2964 	cjne	a,_main_sloc0_1_0,00399$
      000EA9 E4               [12] 2965 	clr	a
      000EAA B5*01 02         [24] 2966 	cjne	a,(_main_sloc0_1_0 + 1),00399$
      000EAD 80 03            [24] 2967 	sjmp	00400$
      000EAF                       2968 00399$:
      000EAF 02r04r58         [24] 2969 	ljmp	00173$
      000EB2                       2970 00400$:
                                   2971 ;	main.c:369: printf_tiny("\n\rFree Buffer 0\n\r");
      000EB2 C0 05            [24] 2972 	push	ar5
      000EB4 C0 04            [24] 2973 	push	ar4
      000EB6 74rC2            [12] 2974 	mov	a,#___str_62
      000EB8 C0 E0            [24] 2975 	push	acc
      000EBA 74s06            [12] 2976 	mov	a,#(___str_62 >> 8)
      000EBC C0 E0            [24] 2977 	push	acc
      000EBE 12r00r00         [24] 2978 	lcall	_printf_tiny
      000EC1 15 81            [12] 2979 	dec	sp
      000EC3 15 81            [12] 2980 	dec	sp
                                   2981 ;	main.c:370: free(buffer_0);
      000EC5 90r12rC0         [24] 2982 	mov	dptr,#_buffer_0
      000EC8 E0               [24] 2983 	movx	a,@dptr
      000EC9 FE               [12] 2984 	mov	r6,a
      000ECA A3               [24] 2985 	inc	dptr
      000ECB E0               [24] 2986 	movx	a,@dptr
      000ECC FF               [12] 2987 	mov	r7,a
      000ECD 7B 00            [12] 2988 	mov	r3,#0x00
      000ECF 8E 82            [24] 2989 	mov	dpl,r6
      000ED1 8F 83            [24] 2990 	mov	dph,r7
      000ED3 8B F0            [24] 2991 	mov	b,r3
      000ED5 12r00r00         [24] 2992 	lcall	_free
                                   2993 ;	main.c:371: printf_tiny("\n\rBuffer 1 will now become empty\n\r");
      000ED8 74rD4            [12] 2994 	mov	a,#___str_63
      000EDA C0 E0            [24] 2995 	push	acc
      000EDC 74s06            [12] 2996 	mov	a,#(___str_63 >> 8)
      000EDE C0 E0            [24] 2997 	push	acc
      000EE0 12r00r00         [24] 2998 	lcall	_printf_tiny
      000EE3 15 81            [12] 2999 	dec	sp
      000EE5 15 81            [12] 3000 	dec	sp
                                   3001 ;	main.c:373: printf_tiny("\n\rFreeing Buffer 1\n\r");
      000EE7 74rF7            [12] 3002 	mov	a,#___str_64
      000EE9 C0 E0            [24] 3003 	push	acc
      000EEB 74s06            [12] 3004 	mov	a,#(___str_64 >> 8)
      000EED C0 E0            [24] 3005 	push	acc
      000EEF 12r00r00         [24] 3006 	lcall	_printf_tiny
      000EF2 15 81            [12] 3007 	dec	sp
      000EF4 15 81            [12] 3008 	dec	sp
                                   3009 ;	main.c:374: free(buffer_1);
      000EF6 90r12rC2         [24] 3010 	mov	dptr,#_buffer_1
      000EF9 E0               [24] 3011 	movx	a,@dptr
      000EFA FE               [12] 3012 	mov	r6,a
      000EFB A3               [24] 3013 	inc	dptr
      000EFC E0               [24] 3014 	movx	a,@dptr
      000EFD FF               [12] 3015 	mov	r7,a
      000EFE 7B 00            [12] 3016 	mov	r3,#0x00
      000F00 8E 82            [24] 3017 	mov	dpl,r6
      000F02 8F 83            [24] 3018 	mov	dph,r7
      000F04 8B F0            [24] 3019 	mov	b,r3
      000F06 12r00r00         [24] 3020 	lcall	_free
                                   3021 ;	main.c:375: printf_tiny("\n\rBuffer 1 is empty\n\r");
      000F09 74r0C            [12] 3022 	mov	a,#___str_65
      000F0B C0 E0            [24] 3023 	push	acc
      000F0D 74s07            [12] 3024 	mov	a,#(___str_65 >> 8)
      000F0F C0 E0            [24] 3025 	push	acc
      000F11 12r00r00         [24] 3026 	lcall	_printf_tiny
      000F14 15 81            [12] 3027 	dec	sp
      000F16 15 81            [12] 3028 	dec	sp
      000F18 D0 04            [24] 3029 	pop	ar4
      000F1A D0 05            [24] 3030 	pop	ar5
                                   3031 ;	main.c:377: for(total_buffer_count=2;(total_buffer_count)<(j+2);(total_buffer_count)++)
      000F1C 74 02            [12] 3032 	mov	a,#0x02
      000F1E 25*08            [12] 3033 	add	a,_main_sloc4_1_0
      000F20 FE               [12] 3034 	mov	r6,a
      000F21 E4               [12] 3035 	clr	a
      000F22 35*09            [12] 3036 	addc	a,(_main_sloc4_1_0 + 1)
      000F24 FF               [12] 3037 	mov	r7,a
      000F25 7A 02            [12] 3038 	mov	r2,#0x02
      000F27 7B 00            [12] 3039 	mov	r3,#0x00
      000F29                       3040 00184$:
      000F29 8E 00            [24] 3041 	mov	ar0,r6
      000F2B 8F 01            [24] 3042 	mov	ar1,r7
      000F2D C3               [12] 3043 	clr	c
      000F2E EA               [12] 3044 	mov	a,r2
      000F2F 98               [12] 3045 	subb	a,r0
      000F30 EB               [12] 3046 	mov	a,r3
      000F31 99               [12] 3047 	subb	a,r1
      000F32 40 03            [24] 3048 	jc	00401$
      000F34 02r04r58         [24] 3049 	ljmp	00173$
      000F37                       3050 00401$:
                                   3051 ;	main.c:379: printf_tiny("\n\rFreeing buffer_%d\n\r",total_buffer_count);
      000F37 C0 04            [24] 3052 	push	ar4
      000F39 C0 05            [24] 3053 	push	ar5
      000F3B C0 07            [24] 3054 	push	ar7
      000F3D C0 06            [24] 3055 	push	ar6
      000F3F C0 05            [24] 3056 	push	ar5
      000F41 C0 04            [24] 3057 	push	ar4
      000F43 C0 03            [24] 3058 	push	ar3
      000F45 C0 02            [24] 3059 	push	ar2
      000F47 C0 02            [24] 3060 	push	ar2
      000F49 C0 03            [24] 3061 	push	ar3
      000F4B 74r22            [12] 3062 	mov	a,#___str_66
      000F4D C0 E0            [24] 3063 	push	acc
      000F4F 74s07            [12] 3064 	mov	a,#(___str_66 >> 8)
      000F51 C0 E0            [24] 3065 	push	acc
      000F53 12r00r00         [24] 3066 	lcall	_printf_tiny
      000F56 E5 81            [12] 3067 	mov	a,sp
      000F58 24 FC            [12] 3068 	add	a,#0xfc
      000F5A F5 81            [12] 3069 	mov	sp,a
      000F5C D0 02            [24] 3070 	pop	ar2
      000F5E D0 03            [24] 3071 	pop	ar3
      000F60 D0 04            [24] 3072 	pop	ar4
      000F62 D0 05            [24] 3073 	pop	ar5
                                   3074 ;	main.c:380: free(buffer_n[total_buffer_count]);
      000F64 EA               [12] 3075 	mov	a,r2
      000F65 2A               [12] 3076 	add	a,r2
      000F66 F8               [12] 3077 	mov	r0,a
      000F67 EB               [12] 3078 	mov	a,r3
      000F68 33               [12] 3079 	rlc	a
      000F69 F9               [12] 3080 	mov	r1,a
      000F6A E8               [12] 3081 	mov	a,r0
      000F6B 24rC4            [12] 3082 	add	a,#_buffer_n
      000F6D F5 82            [12] 3083 	mov	dpl,a
      000F6F E9               [12] 3084 	mov	a,r1
      000F70 34s12            [12] 3085 	addc	a,#(_buffer_n >> 8)
      000F72 F5 83            [12] 3086 	mov	dph,a
      000F74 E0               [24] 3087 	movx	a,@dptr
      000F75 F8               [12] 3088 	mov	r0,a
      000F76 A3               [24] 3089 	inc	dptr
      000F77 E0               [24] 3090 	movx	a,@dptr
      000F78 F9               [12] 3091 	mov	r1,a
      000F79 7D 00            [12] 3092 	mov	r5,#0x00
      000F7B 88 82            [24] 3093 	mov	dpl,r0
      000F7D 89 83            [24] 3094 	mov	dph,r1
      000F7F 8D F0            [24] 3095 	mov	b,r5
      000F81 C0 05            [24] 3096 	push	ar5
      000F83 C0 04            [24] 3097 	push	ar4
      000F85 C0 03            [24] 3098 	push	ar3
      000F87 C0 02            [24] 3099 	push	ar2
      000F89 12r00r00         [24] 3100 	lcall	_free
      000F8C D0 02            [24] 3101 	pop	ar2
      000F8E D0 03            [24] 3102 	pop	ar3
                                   3103 ;	main.c:381: printf_tiny("\n\rBuffer %d freed \n\r",total_buffer_count);
      000F90 C0 03            [24] 3104 	push	ar3
      000F92 C0 02            [24] 3105 	push	ar2
      000F94 C0 02            [24] 3106 	push	ar2
      000F96 C0 03            [24] 3107 	push	ar3
      000F98 74r38            [12] 3108 	mov	a,#___str_67
      000F9A C0 E0            [24] 3109 	push	acc
      000F9C 74s07            [12] 3110 	mov	a,#(___str_67 >> 8)
      000F9E C0 E0            [24] 3111 	push	acc
      000FA0 12r00r00         [24] 3112 	lcall	_printf_tiny
      000FA3 E5 81            [12] 3113 	mov	a,sp
      000FA5 24 FC            [12] 3114 	add	a,#0xfc
      000FA7 F5 81            [12] 3115 	mov	sp,a
      000FA9 D0 02            [24] 3116 	pop	ar2
      000FAB D0 03            [24] 3117 	pop	ar3
      000FAD D0 04            [24] 3118 	pop	ar4
      000FAF D0 05            [24] 3119 	pop	ar5
      000FB1 D0 06            [24] 3120 	pop	ar6
      000FB3 D0 07            [24] 3121 	pop	ar7
                                   3122 ;	main.c:377: for(total_buffer_count=2;(total_buffer_count)<(j+2);(total_buffer_count)++)
      000FB5 0A               [12] 3123 	inc	r2
      000FB6 BA 00 01         [24] 3124 	cjne	r2,#0x00,00402$
      000FB9 0B               [12] 3125 	inc	r3
      000FBA                       3126 00402$:
      000FBA D0 05            [24] 3127 	pop	ar5
      000FBC D0 04            [24] 3128 	pop	ar4
                                   3129 ;	main.c:396: }
      000FBE 02r0Fr29         [24] 3130 	ljmp	00184$
                                   3131 	.area CSEG    (CODE)
                                   3132 	.area CONST   (CODE)
                                   3133 	.area CONST   (CODE)
      000000                       3134 ___str_0:
      000000 45 6E 74 65 72 20 61  3135 	.ascii "Enter a value divisible btw 48 and 4800 and divisible by 16"
             20 76 61 6C 75 65 20
             64 69 76 69 73 69 62
             6C 65 20 62 74 77 20
             34 38 20 61 6E 64 20
             34 38 30 30 20 61 6E
             64 20 64 69 76 69 73
             69 62 6C 65 20 62 79
             20 31 36
      00003B 0D                    3136 	.db 0x0d
      00003C 0A                    3137 	.db 0x0a
      00003D 00                    3138 	.db 0x00
                                   3139 	.area CSEG    (CODE)
                                   3140 	.area CONST   (CODE)
      00003E                       3141 ___str_1:
      00003E 61 3D 20 25 64        3142 	.ascii "a= %d"
      000043 0D                    3143 	.db 0x0d
      000044 0A                    3144 	.db 0x0a
      000045 00                    3145 	.db 0x00
                                   3146 	.area CSEG    (CODE)
                                   3147 	.area CONST   (CODE)
      000046                       3148 ___str_2:
      000046 62 3D 20 25 64        3149 	.ascii "b= %d"
      00004B 0D                    3150 	.db 0x0d
      00004C 0A                    3151 	.db 0x0a
      00004D 00                    3152 	.db 0x00
                                   3153 	.area CSEG    (CODE)
                                   3154 	.area CONST   (CODE)
      00004E                       3155 ___str_3:
      00004E 20 63 20 3D 20 25 64  3156 	.ascii " c = %d"
      000055 0D                    3157 	.db 0x0d
      000056 0A                    3158 	.db 0x0a
      000057 00                    3159 	.db 0x00
                                   3160 	.area CSEG    (CODE)
                                   3161 	.area CONST   (CODE)
      000058                       3162 ___str_4:
      000058 20 64 20 3D 20 25 64  3163 	.ascii " d = %d "
             20
      000060 0D                    3164 	.db 0x0d
      000061 0A                    3165 	.db 0x0a
      000062 00                    3166 	.db 0x00
                                   3167 	.area CSEG    (CODE)
                                   3168 	.area CONST   (CODE)
      000063                       3169 ___str_5:
      000063 6E 75 6D 62 65 72 20  3170 	.ascii "number = %d"
             3D 20 25 64
      00006E 0A                    3171 	.db 0x0a
      00006F 0D                    3172 	.db 0x0d
      000070 00                    3173 	.db 0x00
                                   3174 	.area CSEG    (CODE)
                                   3175 	.area CONST   (CODE)
      000071                       3176 ___str_6:
      000071 76 61 6C 69 64 20 69  3177 	.ascii "valid input"
             6E 70 75 74
      00007C 0D                    3178 	.db 0x0d
      00007D 0A                    3179 	.db 0x0a
      00007E 00                    3180 	.db 0x00
                                   3181 	.area CSEG    (CODE)
                                   3182 	.area CONST   (CODE)
      00007F                       3183 ___str_7:
      00007F 6E 75 6D 3D 20 25 64  3184 	.ascii "num= %d"
      000086 00                    3185 	.db 0x00
                                   3186 	.area CSEG    (CODE)
                                   3187 	.area CONST   (CODE)
      000087                       3188 ___str_8:
      000087 6E 6F 74 20 61 20 76  3189 	.ascii "not a valid input"
             61 6C 69 64 20 69 6E
             70 75 74
      000098 0D                    3190 	.db 0x0d
      000099 0A                    3191 	.db 0x0a
      00009A 00                    3192 	.db 0x00
                                   3193 	.area CSEG    (CODE)
                                   3194 	.area CONST   (CODE)
      00009B                       3195 ___str_9:
      00009B 45 6E 74 65 72 20 61  3196 	.ascii "Enter a value divisible btw 30 and 300"
             20 76 61 6C 75 65 20
             64 69 76 69 73 69 62
             6C 65 20 62 74 77 20
             33 30 20 61 6E 64 20
             33 30 30
      0000C1 0D                    3197 	.db 0x0d
      0000C2 0A                    3198 	.db 0x0a
      0000C3 00                    3199 	.db 0x00
                                   3200 	.area CSEG    (CODE)
                                   3201 	.area CONST   (CODE)
      0000C4                       3202 ___str_10:
      0000C4 20 71 20 3D 20 25 64  3203 	.ascii " q = %d "
             20
      0000CC 0D                    3204 	.db 0x0d
      0000CD 0A                    3205 	.db 0x0a
      0000CE 00                    3206 	.db 0x00
                                   3207 	.area CSEG    (CODE)
                                   3208 	.area CONST   (CODE)
      0000CF                       3209 ___str_11:
      0000CF 20 72 20 3D 20 25 64  3210 	.ascii " r = %d "
             20
      0000D7 0D                    3211 	.db 0x0d
      0000D8 0A                    3212 	.db 0x0a
      0000D9 00                    3213 	.db 0x00
                                   3214 	.area CSEG    (CODE)
                                   3215 	.area CONST   (CODE)
      0000DA                       3216 ___str_12:
      0000DA 20 73 20 3D 20 25 64  3217 	.ascii " s = %d "
             20
      0000E2 0D                    3218 	.db 0x0d
      0000E3 0A                    3219 	.db 0x0a
      0000E4 00                    3220 	.db 0x00
                                   3221 	.area CSEG    (CODE)
                                   3222 	.area CONST   (CODE)
      0000E5                       3223 ___str_13:
      0000E5 6E 65 77 20 76 61 6C  3224 	.ascii "new value of buffer is = %d"
             75 65 20 6F 66 20 62
             75 66 66 65 72 20 69
             73 20 3D 20 25 64
      000100 00                    3225 	.db 0x00
                                   3226 	.area CSEG    (CODE)
                                   3227 	.area CONST   (CODE)
      000101                       3228 ___str_14:
      000101 65 6E 74 65 72 20 74  3229 	.ascii "enter the number of buffer to delete"
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             75 66 66 65 72 20 74
             6F 20 64 65 6C 65 74
             65
      000125 00                    3230 	.db 0x00
                                   3231 	.area CSEG    (CODE)
                                   3232 	.area CONST   (CODE)
      000126                       3233 ___str_15:
      000126 74 68 65 20 6E 75 6D  3234 	.ascii "the number is %d"
             62 65 72 20 69 73 20
             25 64
      000136 00                    3235 	.db 0x00
                                   3236 	.area CSEG    (CODE)
                                   3237 	.area CONST   (CODE)
      000137                       3238 ___str_16:
      000137 6D 61 6C 6C 6F 63 20  3239 	.ascii "malloc for buffer0 is successful"
             66 6F 72 20 62 75 66
             66 65 72 30 20 69 73
             20 73 75 63 63 65 73
             73 66 75 6C
      000157 0D                    3240 	.db 0x0d
      000158 0A                    3241 	.db 0x0a
      000159 00                    3242 	.db 0x00
                                   3243 	.area CSEG    (CODE)
                                   3244 	.area CONST   (CODE)
      00015A                       3245 ___str_17:
      00015A 73 74 61 72 74 69 6E  3246 	.ascii "starting address of buffer 0 is %x"
             67 20 61 64 64 72 65
             73 73 20 6F 66 20 62
             75 66 66 65 72 20 30
             20 69 73 20 25 78
      00017C 0D                    3247 	.db 0x0d
      00017D 0A                    3248 	.db 0x0a
      00017E 00                    3249 	.db 0x00
                                   3250 	.area CSEG    (CODE)
                                   3251 	.area CONST   (CODE)
      00017F                       3252 ___str_18:
      00017F 6D 61 6C 6C 6F 63 20  3253 	.ascii "malloc for buffer1 is successful"
             66 6F 72 20 62 75 66
             66 65 72 31 20 69 73
             20 73 75 63 63 65 73
             73 66 75 6C
      00019F 0D                    3254 	.db 0x0d
      0001A0 0A                    3255 	.db 0x0a
      0001A1 00                    3256 	.db 0x00
                                   3257 	.area CSEG    (CODE)
                                   3258 	.area CONST   (CODE)
      0001A2                       3259 ___str_19:
      0001A2 73 74 61 72 74 69 6E  3260 	.ascii "starting address of buffer 1 is %x"
             67 20 61 64 64 72 65
             73 73 20 6F 66 20 62
             75 66 66 65 72 20 31
             20 69 73 20 25 78
      0001C4 0D                    3261 	.db 0x0d
      0001C5 0A                    3262 	.db 0x0a
      0001C6 00                    3263 	.db 0x00
                                   3264 	.area CSEG    (CODE)
                                   3265 	.area CONST   (CODE)
      0001C7                       3266 ___str_20:
      0001C7 45 6E 74 65 72 20 61  3267 	.ascii "Enter a character"
             20 63 68 61 72 61 63
             74 65 72
      0001D8 0D                    3268 	.db 0x0d
      0001D9 0A                    3269 	.db 0x0a
      0001DA 00                    3270 	.db 0x00
                                   3271 	.area CSEG    (CODE)
                                   3272 	.area CONST   (CODE)
      0001DB                       3273 ___str_21:
      0001DB 74 68 65 20 69 6E 70  3274 	.ascii "the input character is %d"
             75 74 20 63 68 61 72
             61 63 74 65 72 20 69
             73 20 25 64
      0001F4 0D                    3275 	.db 0x0d
      0001F5 0A                    3276 	.db 0x0a
      0001F6 00                    3277 	.db 0x00
                                   3278 	.area CSEG    (CODE)
                                   3279 	.area CONST   (CODE)
      0001F7                       3280 ___str_22:
      0001F7 62 75 66 66 65 72 20  3281 	.ascii "buffer is "
             69 73 20
      000201 0D                    3282 	.db 0x0d
      000202 0A                    3283 	.db 0x0a
      000203 25 70                 3284 	.ascii "%p"
      000205 00                    3285 	.db 0x00
                                   3286 	.area CSEG    (CODE)
                                   3287 	.area CONST   (CODE)
      000206                       3288 ___str_23:
      000206 63 6F 75 6E 74 20 3D  3289 	.ascii "count = %d"
             20 25 64
      000210 0D                    3290 	.db 0x0d
      000211 0A                    3291 	.db 0x0a
      000212 00                    3292 	.db 0x00
                                   3293 	.area CSEG    (CODE)
                                   3294 	.area CONST   (CODE)
      000213                       3295 ___str_24:
      000213 62 75 66 66 65 72 20  3296 	.ascii "buffer is full"
             69 73 20 66 75 6C 6C
      000221 0D                    3297 	.db 0x0d
      000222 0A                    3298 	.db 0x0a
      000223 00                    3299 	.db 0x00
                                   3300 	.area CSEG    (CODE)
                                   3301 	.area CONST   (CODE)
      000224                       3302 ___str_25:
      000224 20 41 6C 6C 6F 63 61  3303 	.ascii " Allocating a new buffer"
             74 69 6E 67 20 61 20
             6E 65 77 20 62 75 66
             66 65 72
      00023C 0D                    3304 	.db 0x0d
      00023D 0A                    3305 	.db 0x0a
      00023E 00                    3306 	.db 0x00
                                   3307 	.area CSEG    (CODE)
                                   3308 	.area CONST   (CODE)
      00023F                       3309 ___str_26:
      00023F 65 6E 74 65 72 20 61  3310 	.ascii "enter a new value between 30 and 300"
             20 6E 65 77 20 76 61
             6C 75 65 20 62 65 74
             77 65 65 6E 20 33 30
             20 61 6E 64 20 33 30
             30
      000263 0D                    3311 	.db 0x0d
      000264 0A                    3312 	.db 0x0a
      000265 00                    3313 	.db 0x00
                                   3314 	.area CSEG    (CODE)
                                   3315 	.area CONST   (CODE)
      000266                       3316 ___str_27:
      000266 0A                    3317 	.db 0x0a
      000267 0D                    3318 	.db 0x0d
      000268 4D 65 6D 6F 72 79 20  3319 	.ascii "Memory Allocation for Buffer_%d Failed"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 66 6F 72
             20 42 75 66 66 65 72
             5F 25 64 20 46 61 69
             6C 65 64
      00028E 0A                    3320 	.db 0x0a
      00028F 0D                    3321 	.db 0x0d
      000290 50 72 65 73 73 20 27  3322 	.ascii "Press '+' to Try again"
             2B 27 20 74 6F 20 54
             72 79 20 61 67 61 69
             6E
      0002A6 0A                    3323 	.db 0x0a
      0002A7 0D                    3324 	.db 0x0d
      0002A8 00                    3325 	.db 0x00
                                   3326 	.area CSEG    (CODE)
                                   3327 	.area CONST   (CODE)
      0002A9                       3328 ___str_28:
      0002A9 0A                    3329 	.db 0x0a
      0002AA 0D                    3330 	.db 0x0d
      0002AB 4D 65 6D 6F 72 79 20  3331 	.ascii "Memory Allocation Successful for Buffer_%d"
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 53 75 63
             63 65 73 73 66 75 6C
             20 66 6F 72 20 42 75
             66 66 65 72 5F 25 64
      0002D5 0A                    3332 	.db 0x0a
      0002D6 0D                    3333 	.db 0x0d
      0002D7 00                    3334 	.db 0x00
                                   3335 	.area CSEG    (CODE)
                                   3336 	.area CONST   (CODE)
      0002D8                       3337 ___str_29:
      0002D8 0A                    3338 	.db 0x0a
      0002D9 0D                    3339 	.db 0x0d
      0002DA 42 75 66 66 65 72 5F  3340 	.ascii "Buffer_%d allocated of size %d"
             25 64 20 61 6C 6C 6F
             63 61 74 65 64 20 6F
             66 20 73 69 7A 65 20
             25 64
      0002F8 0A                    3341 	.db 0x0a
      0002F9 0D                    3342 	.db 0x0d
      0002FA 00                    3343 	.db 0x00
                                   3344 	.area CSEG    (CODE)
                                   3345 	.area CONST   (CODE)
      0002FB                       3346 ___str_30:
      0002FB 0A                    3347 	.db 0x0a
      0002FC 0D                    3348 	.db 0x0d
      0002FD 41 64 64 72 65 73 73  3349 	.ascii "Address of buffer_%d = 0x%x"
             20 6F 66 20 62 75 66
             66 65 72 5F 25 64 20
             3D 20 30 78 25 78
      000318 0A                    3350 	.db 0x0a
      000319 0D                    3351 	.db 0x0d
      00031A 00                    3352 	.db 0x00
                                   3353 	.area CSEG    (CODE)
                                   3354 	.area CONST   (CODE)
      00031B                       3355 ___str_31:
      00031B 0A                    3356 	.db 0x0a
      00031C 0D                    3357 	.db 0x0d
      00031D 45 6E 74 65 72 20 61  3358 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      000338 0A                    3359 	.db 0x0a
      000339 0D                    3360 	.db 0x0d
      00033A 00                    3361 	.db 0x00
                                   3362 	.area CSEG    (CODE)
                                   3363 	.area CONST   (CODE)
      00033B                       3364 ___str_32:
      00033B 0A                    3365 	.db 0x0a
      00033C 0D                    3366 	.db 0x0d
      00033D 42 75 66 66 65 72 20  3367 	.ascii "Buffer 0 cannot be deleted!"
             30 20 63 61 6E 6E 6F
             74 20 62 65 20 64 65
             6C 65 74 65 64 21
      000358 0A                    3368 	.db 0x0a
      000359 0D                    3369 	.db 0x0d
      00035A 00                    3370 	.db 0x00
                                   3371 	.area CSEG    (CODE)
                                   3372 	.area CONST   (CODE)
      00035B                       3373 ___str_33:
      00035B 0A                    3374 	.db 0x0a
      00035C 0D                    3375 	.db 0x0d
      00035D 42 75 66 66 65 72 20  3376 	.ascii "Buffer 1>%d"
             31 3E 25 64
      000368 0A                    3377 	.db 0x0a
      000369 0D                    3378 	.db 0x0d
      00036A 00                    3379 	.db 0x00
                                   3380 	.area CSEG    (CODE)
                                   3381 	.area CONST   (CODE)
      00036B                       3382 ___str_34:
      00036B 42 75 66 66 65 72 20  3383 	.ascii "Buffer 1 deleted"
             31 20 64 65 6C 65 74
             65 64
      00037B 0D                    3384 	.db 0x0d
      00037C 0A                    3385 	.db 0x0a
      00037D 00                    3386 	.db 0x00
                                   3387 	.area CSEG    (CODE)
                                   3388 	.area CONST   (CODE)
      00037E                       3389 ___str_35:
      00037E 0A                    3390 	.db 0x0a
      00037F 0D                    3391 	.db 0x0d
      000380 44 65 6C 65 74 69 6E  3392 	.ascii "Deleting buffer_%d........."
             67 20 62 75 66 66 65
             72 5F 25 64 2E 2E 2E
             2E 2E 2E 2E 2E 2E
      00039B 0A                    3393 	.db 0x0a
      00039C 0D                    3394 	.db 0x0d
      00039D 00                    3395 	.db 0x00
                                   3396 	.area CSEG    (CODE)
                                   3397 	.area CONST   (CODE)
      00039E                       3398 ___str_36:
      00039E 0A                    3399 	.db 0x0a
      00039F 0D                    3400 	.db 0x0d
      0003A0 42 75 66 66 65 72 20  3401 	.ascii "Buffer %d  is free"
             25 64 20 20 69 73 20
             66 72 65 65
      0003B2 0A                    3402 	.db 0x0a
      0003B3 0D                    3403 	.db 0x0d
      0003B4 00                    3404 	.db 0x00
                                   3405 	.area CSEG    (CODE)
                                   3406 	.area CONST   (CODE)
      0003B5                       3407 ___str_37:
      0003B5 0A                    3408 	.db 0x0a
      0003B6 0D                    3409 	.db 0x0d
      0003B7 45 6E 74 65 72 20 61  3410 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      0003D2 0A                    3411 	.db 0x0a
      0003D3 0D                    3412 	.db 0x0d
      0003D4 50 72 65 73 73 20 27  3413 	.ascii "Press '-' to delete any valid buffer"
             2D 27 20 74 6F 20 64
             65 6C 65 74 65 20 61
             6E 79 20 76 61 6C 69
             64 20 62 75 66 66 65
             72
      0003F8 0A                    3414 	.db 0x0a
      0003F9 0D                    3415 	.db 0x0d
      0003FA 00                    3416 	.db 0x00
                                   3417 	.area CSEG    (CODE)
                                   3418 	.area CONST   (CODE)
      0003FB                       3419 ___str_38:
      0003FB 20 48 45 41 50 20 52  3420 	.ascii " HEAP REPORT of buffer_0 "
             45 50 4F 52 54 20 6F
             66 20 62 75 66 66 65
             72 5F 30 20
      000414 0D                    3421 	.db 0x0d
      000415 0A                    3422 	.db 0x0a
      000416 00                    3423 	.db 0x00
                                   3424 	.area CSEG    (CODE)
                                   3425 	.area CONST   (CODE)
      000417                       3426 ___str_39:
      000417 0A                    3427 	.db 0x0a
      000418 0D                    3428 	.db 0x0d
      000419 53 74 61 72 74 20 41  3429 	.ascii "Start Addressof buffer_0x%x"
             64 64 72 65 73 73 6F
             66 20 62 75 66 66 65
             72 5F 30 78 25 78
      000434 0A                    3430 	.db 0x0a
      000435 0D                    3431 	.db 0x0d
      000436 00                    3432 	.db 0x00
                                   3433 	.area CSEG    (CODE)
                                   3434 	.area CONST   (CODE)
      000437                       3435 ___str_40:
      000437 0A                    3436 	.db 0x0a
      000438 0D                    3437 	.db 0x0d
      000439 45 6E 64 69 6E 67 20  3438 	.ascii "Ending Address of buffer_0x%x"
             41 64 64 72 65 73 73
             20 6F 66 20 62 75 66
             66 65 72 5F 30 78 25
             78
      000456 0A                    3439 	.db 0x0a
      000457 0D                    3440 	.db 0x0d
      000458 00                    3441 	.db 0x00
                                   3442 	.area CSEG    (CODE)
                                   3443 	.area CONST   (CODE)
      000459                       3444 ___str_41:
      000459 0A                    3445 	.db 0x0a
      00045A 0D                    3446 	.db 0x0d
      00045B 42 75 66 66 65 72 20  3447 	.ascii "Buffer Size of buffer_0 %d"
             53 69 7A 65 20 6F 66
             20 62 75 66 66 65 72
             5F 30 20 25 64
      000475 0A                    3448 	.db 0x0a
      000476 0D                    3449 	.db 0x0d
      000477 00                    3450 	.db 0x00
                                   3451 	.area CSEG    (CODE)
                                   3452 	.area CONST   (CODE)
      000478                       3453 ___str_42:
      000478 0A                    3454 	.db 0x0a
      000479 0D                    3455 	.db 0x0d
      00047A 53 74 6F 72 65 64 20  3456 	.ascii "Stored characters in buffer>>>%d"
             63 68 61 72 61 63 74
             65 72 73 20 69 6E 20
             62 75 66 66 65 72 3E
             3E 3E 25 64
      00049A 0A                    3457 	.db 0x0a
      00049B 0D                    3458 	.db 0x0d
      00049C 00                    3459 	.db 0x00
                                   3460 	.area CSEG    (CODE)
                                   3461 	.area CONST   (CODE)
      00049D                       3462 ___str_43:
      00049D 0A                    3463 	.db 0x0a
      00049E 0D                    3464 	.db 0x0d
      00049F 46 72 65 65 20 53 70  3465 	.ascii "Free Spaces in buffer%d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             25 64
      0004B6 0A                    3466 	.db 0x0a
      0004B7 0D                    3467 	.db 0x0d
      0004B8 00                    3468 	.db 0x00
                                   3469 	.area CSEG    (CODE)
                                   3470 	.area CONST   (CODE)
      0004B9                       3471 ___str_44:
      0004B9 0A                    3472 	.db 0x0a
      0004BA 0D                    3473 	.db 0x0d
      0004BB 48 65 61 70 20 73 74  3474 	.ascii "Heap status of buffer_1"
             61 74 75 73 20 6F 66
             20 62 75 66 66 65 72
             5F 31
      0004D2 0A                    3475 	.db 0x0a
      0004D3 0D                    3476 	.db 0x0d
      0004D4 00                    3477 	.db 0x00
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area CONST   (CODE)
      0004D5                       3480 ___str_45:
      0004D5 0A                    3481 	.db 0x0a
      0004D6 0D                    3482 	.db 0x0d
      0004D7 53 74 61 72 74 20 41  3483 	.ascii "Start Address of buffer_1 x%x"
             64 64 72 65 73 73 20
             6F 66 20 62 75 66 66
             65 72 5F 31 20 78 25
             78
      0004F4 0A                    3484 	.db 0x0a
      0004F5 0D                    3485 	.db 0x0d
      0004F6 00                    3486 	.db 0x00
                                   3487 	.area CSEG    (CODE)
                                   3488 	.area CONST   (CODE)
      0004F7                       3489 ___str_46:
      0004F7 0A                    3490 	.db 0x0a
      0004F8 0D                    3491 	.db 0x0d
      0004F9 45 6E 64 69 6E 67 20  3492 	.ascii "Ending Address of buffer_1x%x"
             41 64 64 72 65 73 73
             20 6F 66 20 62 75 66
             66 65 72 5F 31 78 25
             78
      000516 0A                    3493 	.db 0x0a
      000517 0D                    3494 	.db 0x0d
      000518 00                    3495 	.db 0x00
                                   3496 	.area CSEG    (CODE)
                                   3497 	.area CONST   (CODE)
      000519                       3498 ___str_47:
      000519 0A                    3499 	.db 0x0a
      00051A 0D                    3500 	.db 0x0d
      00051B 42 75 66 66 65 72 20  3501 	.ascii "Buffer Size%d"
             53 69 7A 65 25 64
      000528 0A                    3502 	.db 0x0a
      000529 0D                    3503 	.db 0x0d
      00052A 00                    3504 	.db 0x00
                                   3505 	.area CSEG    (CODE)
                                   3506 	.area CONST   (CODE)
      00052B                       3507 ___str_48:
      00052B 0A                    3508 	.db 0x0a
      00052C 0D                    3509 	.db 0x0d
      00052D 53 74 6F 72 61 67 65  3510 	.ascii "Storage characters in buffer>>>0"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             3E 3E 3E 30
      00054D 0A                    3511 	.db 0x0a
      00054E 0D                    3512 	.db 0x0d
      00054F 00                    3513 	.db 0x00
                                   3514 	.area CSEG    (CODE)
                                   3515 	.area CONST   (CODE)
      000550                       3516 ___str_49:
      000550 0A                    3517 	.db 0x0a
      000551 0D                    3518 	.db 0x0d
      000552 46 72 65 65 20 53 70  3519 	.ascii "Free Spaces in buffer>>>>>>>>>>%d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             3E 3E 3E 3E 3E 3E 3E
             3E 3E 3E 25 64
      000573 0A                    3520 	.db 0x0a
      000574 0D                    3521 	.db 0x0d
      000575 00                    3522 	.db 0x00
                                   3523 	.area CSEG    (CODE)
                                   3524 	.area CONST   (CODE)
      000576                       3525 ___str_50:
      000576 0A                    3526 	.db 0x0a
      000577 0D                    3527 	.db 0x0d
      000578 42 55 46 46 45 52 20  3528 	.ascii "BUFFER %d"
             25 64
      000581 0A                    3529 	.db 0x0a
      000582 0D                    3530 	.db 0x0d
      000583 00                    3531 	.db 0x00
                                   3532 	.area CSEG    (CODE)
                                   3533 	.area CONST   (CODE)
      000584                       3534 ___str_51:
      000584 0A                    3535 	.db 0x0a
      000585 0D                    3536 	.db 0x0d
      000586 53 74 61 72 74 20 41  3537 	.ascii "Start Address0x%x"
             64 64 72 65 73 73 30
             78 25 78
      000597 0A                    3538 	.db 0x0a
      000598 0D                    3539 	.db 0x0d
      000599 00                    3540 	.db 0x00
                                   3541 	.area CSEG    (CODE)
                                   3542 	.area CONST   (CODE)
      00059A                       3543 ___str_52:
      00059A 0A                    3544 	.db 0x0a
      00059B 0D                    3545 	.db 0x0d
      00059C 45 6E 64 69 6E 67 20  3546 	.ascii "Ending Address0x%x"
             41 64 64 72 65 73 73
             30 78 25 78
      0005AE 0A                    3547 	.db 0x0a
      0005AF 0D                    3548 	.db 0x0d
      0005B0 00                    3549 	.db 0x00
                                   3550 	.area CSEG    (CODE)
                                   3551 	.area CONST   (CODE)
      0005B1                       3552 ___str_53:
      0005B1 0A                    3553 	.db 0x0a
      0005B2 0D                    3554 	.db 0x0d
      0005B3 53 74 6F 72 61 67 65  3555 	.ascii "Storage characters in buffer0"
             20 63 68 61 72 61 63
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             30
      0005D0 0A                    3556 	.db 0x0a
      0005D1 0D                    3557 	.db 0x0d
      0005D2 00                    3558 	.db 0x00
                                   3559 	.area CSEG    (CODE)
                                   3560 	.area CONST   (CODE)
      0005D3                       3561 ___str_54:
      0005D3 0A                    3562 	.db 0x0a
      0005D4 0D                    3563 	.db 0x0d
      0005D5 4E 75 6D 62 65 72 20  3564 	.ascii "Number of storage characters = %d"
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 20 25 64
      0005F6 0A                    3565 	.db 0x0a
      0005F7 0D                    3566 	.db 0x0d
      0005F8 00                    3567 	.db 0x00
                                   3568 	.area CSEG    (CODE)
                                   3569 	.area CONST   (CODE)
      0005F9                       3570 ___str_55:
      0005F9 0A                    3571 	.db 0x0a
      0005FA 0D                    3572 	.db 0x0d
      0005FB 54 6F 74 61 6C 20 6E  3573 	.ascii "Total number of characters received = %d"
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 3D 20 25 64
      000623 0A                    3574 	.db 0x0a
      000624 0D                    3575 	.db 0x0d
      000625 00                    3576 	.db 0x00
                                   3577 	.area CSEG    (CODE)
                                   3578 	.area CONST   (CODE)
      000626                       3579 ___str_56:
      000626 0A                    3580 	.db 0x0a
      000627 0D                    3581 	.db 0x0d
      000628 54 6F 74 61 6C 20 6E  3582 	.ascii "Total number of buffers that were allocated since the start "
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 74 68 61 74
             20 77 65 72 65 20 61
             6C 6C 6F 63 61 74 65
             64 20 73 69 6E 63 65
             20 74 68 65 20 73 74
             61 72 74 20
      000664 6F 66 20 74 68 65 20  3583 	.ascii "of the program = %d"
             70 72 6F 67 72 61 6D
             20 3D 20 25 64
      000677 0A                    3584 	.db 0x0a
      000678 0D                    3585 	.db 0x0d
      000679 00                    3586 	.db 0x00
                                   3587 	.area CSEG    (CODE)
                                   3588 	.area CONST   (CODE)
      00067A                       3589 ___str_57:
      00067A 0A                    3590 	.db 0x0a
      00067B 0D                    3591 	.db 0x0d
      00067C 43 6F 6E 74 65 6E 74  3592 	.ascii "Contents in Buffer 0"
             73 20 69 6E 20 42 75
             66 66 65 72 20 30
      000690 0A                    3593 	.db 0x0a
      000691 0D                    3594 	.db 0x0d
      000692 00                    3595 	.db 0x00
                                   3596 	.area CSEG    (CODE)
                                   3597 	.area CONST   (CODE)
      000693                       3598 ___str_58:
      000693 30 78 25 78 3E 3E 20  3599 	.ascii "0x%x>> %x"
             25 78
      00069C 00                    3600 	.db 0x00
                                   3601 	.area CSEG    (CODE)
                                   3602 	.area CONST   (CODE)
      00069D                       3603 ___str_59:
      00069D 20 25 78              3604 	.ascii " %x"
      0006A0 00                    3605 	.db 0x00
                                   3606 	.area CSEG    (CODE)
                                   3607 	.area CONST   (CODE)
      0006A1                       3608 ___str_60:
      0006A1 0A                    3609 	.db 0x0a
      0006A2 0D                    3610 	.db 0x0d
      0006A3 30 78 25 78 3E 3E 20  3611 	.ascii "0x%x>> %x"
             25 78
      0006AC 00                    3612 	.db 0x00
                                   3613 	.area CSEG    (CODE)
                                   3614 	.area CONST   (CODE)
      0006AD                       3615 ___str_61:
      0006AD 0A                    3616 	.db 0x0a
      0006AE 0D                    3617 	.db 0x0d
      0006AF 43 6F 6E 74 65 6E 74  3618 	.ascii "Contents in heap"
             73 20 69 6E 20 68 65
             61 70
      0006BF 0A                    3619 	.db 0x0a
      0006C0 0D                    3620 	.db 0x0d
      0006C1 00                    3621 	.db 0x00
                                   3622 	.area CSEG    (CODE)
                                   3623 	.area CONST   (CODE)
      0006C2                       3624 ___str_62:
      0006C2 0A                    3625 	.db 0x0a
      0006C3 0D                    3626 	.db 0x0d
      0006C4 46 72 65 65 20 42 75  3627 	.ascii "Free Buffer 0"
             66 66 65 72 20 30
      0006D1 0A                    3628 	.db 0x0a
      0006D2 0D                    3629 	.db 0x0d
      0006D3 00                    3630 	.db 0x00
                                   3631 	.area CSEG    (CODE)
                                   3632 	.area CONST   (CODE)
      0006D4                       3633 ___str_63:
      0006D4 0A                    3634 	.db 0x0a
      0006D5 0D                    3635 	.db 0x0d
      0006D6 42 75 66 66 65 72 20  3636 	.ascii "Buffer 1 will now become empty"
             31 20 77 69 6C 6C 20
             6E 6F 77 20 62 65 63
             6F 6D 65 20 65 6D 70
             74 79
      0006F4 0A                    3637 	.db 0x0a
      0006F5 0D                    3638 	.db 0x0d
      0006F6 00                    3639 	.db 0x00
                                   3640 	.area CSEG    (CODE)
                                   3641 	.area CONST   (CODE)
      0006F7                       3642 ___str_64:
      0006F7 0A                    3643 	.db 0x0a
      0006F8 0D                    3644 	.db 0x0d
      0006F9 46 72 65 65 69 6E 67  3645 	.ascii "Freeing Buffer 1"
             20 42 75 66 66 65 72
             20 31
      000709 0A                    3646 	.db 0x0a
      00070A 0D                    3647 	.db 0x0d
      00070B 00                    3648 	.db 0x00
                                   3649 	.area CSEG    (CODE)
                                   3650 	.area CONST   (CODE)
      00070C                       3651 ___str_65:
      00070C 0A                    3652 	.db 0x0a
      00070D 0D                    3653 	.db 0x0d
      00070E 42 75 66 66 65 72 20  3654 	.ascii "Buffer 1 is empty"
             31 20 69 73 20 65 6D
             70 74 79
      00071F 0A                    3655 	.db 0x0a
      000720 0D                    3656 	.db 0x0d
      000721 00                    3657 	.db 0x00
                                   3658 	.area CSEG    (CODE)
                                   3659 	.area CONST   (CODE)
      000722                       3660 ___str_66:
      000722 0A                    3661 	.db 0x0a
      000723 0D                    3662 	.db 0x0d
      000724 46 72 65 65 69 6E 67  3663 	.ascii "Freeing buffer_%d"
             20 62 75 66 66 65 72
             5F 25 64
      000735 0A                    3664 	.db 0x0a
      000736 0D                    3665 	.db 0x0d
      000737 00                    3666 	.db 0x00
                                   3667 	.area CSEG    (CODE)
                                   3668 	.area CONST   (CODE)
      000738                       3669 ___str_67:
      000738 0A                    3670 	.db 0x0a
      000739 0D                    3671 	.db 0x0d
      00073A 42 75 66 66 65 72 20  3672 	.ascii "Buffer %d freed "
             25 64 20 66 72 65 65
             64 20
      00074A 0A                    3673 	.db 0x0a
      00074B 0D                    3674 	.db 0x0d
      00074C 00                    3675 	.db 0x00
                                   3676 	.area CSEG    (CODE)
                                   3677 	.area XINIT   (CODE)
      000000                       3678 __xinit__storage:
      000000 00 00                 3679 	.byte #0x00, #0x00	; 0
      000002                       3680 __xinit__total_char:
      000002 00 00                 3681 	.byte #0x00, #0x00	; 0
      000004                       3682 __xinit__i:
      000004 00 00                 3683 	.byte #0x00, #0x00	;  0
                                   3684 	.area CABS    (ABS,CODE)
